{"version":3,"sources":["containers/SendForm/SendForm.module.scss","components/Modal/Modal.module.scss","common/appConstants.js","components/Modal/index.js","components/Modal/YesNoDialog.js","store/actionCreatorsFactory.js","store/messages/actions.js","store/users/actions.js","common/history.js","store/messages/sagas.js","store/users/sagas.js","store/sagas.js","store/messages/reducer.js","store/users/reducer.js","store/reducers.js","store/configStore/store.prod.js","store/configStore/store.dev.js","store/store.js","containers/Main/index.js","service/EventEmmitter.js","components/Scrollbar/index.js","store/users/selectors.js","store/messages/selectors.js","components/Message/UserMessage.js","components/Modal/UserMessages.js","components/Users/InboxUser.js","components/Users/OutboxUser.js","components/MailBox/index.js","containers/Inbox/index.js","containers/Outbox/index.js","containers/SendForm/index.js","router/routes.js","containers/App/App.js","containers/App/ProviderWrapper.js","reportWebVitals.js","index.js","components/Users/User.module.scss","containers/Main/Main.module.scss","components/Message/UserMessage.module.scss","components/MailBox/MailBox.module.scss","containers/Inbox/Box.module.scss"],"names":["module","exports","appConstants","store","route","messages","users","router","root","sendForm","inbox","outbox","destinations","events","scroll","direction","down","top","Modal","props","onClose","autoHeight","createPortal","className","css","BackDrop","onClick","ClassNames","Body","AutoHeight","e","stopPropagation","children","document","getElementById","YesNoDialog","header","text","onSuccess","Title","CloseButton","Content","ContentAutoHeight","Message","ButtonsPanel","Button","Cancel","Ok","identity","value","createActionsCreatorFlat","zone_prefix","action_type","payloadCreator","metaCreator","BASE_TYPE","createRoutine","createActionsCreator","createAction","addMessage","clearMessages","markMessagesReadForUser","updateUser","clearUsers","markAllRead","history","createBrowserHistory","addMessageHandler","clearMessagesHandler","markMessagesReadForUserHandler","watchMessagesSaga","action","put","ACTIONS","request","payload","userId","username","destination","createdAt","messageId","success","delay","push","failure","all","takeEvery","TRIGGER","updateUserHandler","clearUsersHandler","markAllReadHandler","watchUsersSaga","user","sagas","rootSaga","spawn","initialState","ordered","messagesReducer","initState","produce","state","type","REQUEST","SUCCESS","read","_","forEach","message","FAILURE","usersReducer","count","lastUpdate","lastMessageId","rootReducer","combineReducers","persistConfig","timeout","key","storage","whitelist","persistedReducer","persistReducer","saga","createSagaMiddleware","middlewares","createStore","compose","applyMiddleware","run","rootSagas","composeEnhancers","composeWithDevTools","StoreProd","persistor","persistStore","Main","dispatch","useDispatch","useState","showDialog","setShowDialog","Container","LinkBlock","to","RemoveButton","purge","globalEmitter","EventEmitter","on","err","console","error","Scrollbar","id","rest","ref","scrollEl","useRef","onScroll","useCallback","event","scrollId","current","window","MyScroll","contentEl","contentWrapperEl","scrollTop","offsetHeight","useEffect","EventHub","off","style","width","height","getUsersState","createSelector","usersState","getUsersAll","getUsersAllById","getUsersAllByIdUserName","getUsersInbox","getUsersOutbox","getUsersInboxById","getUsersOutboxById","getUsersInboxByIdCount","getUsersInboxByIdLastMessageId","getUsersOutboxByIdCount","getUsersOutboxByIdLastMessageId","getUsersInboxWithMessages","chain","map","sort","a","b","log","getUsersOutboxWithMessages","getMessagesState","messagesState","getMessagesInbox","getMessagesOutbox","getMessagesInboxAll","getMessagesOutboxAll","getMessagesInboxById","getMessagesInboxByIdSubject","getMessagesInboxByIdBody","getMessagesOutboxById","getMessagesOutboxByIdSubject","getMessagesOutboxByIdBody","getMessagesAll","getMessagesAllById","getMessagesAllByUserId","filter","getMessagesAllByIdIsInbox","getMessagesAllByIdIsOutbox","getMessagesAllByIdSubject","getMessagesAllByIdBody","getMessagesAllByIdIsRead","UserMessage","isInbox","useSelector","shallowEqual","isOutbox","subject","body","isRead","RowClasses","useMemo","Inbox","Outbox","IsRead","MessageBox","Header","UserMessages","userName","uuid","setTimeout","emit","InboxUser","showPopup","setShowPopup","countersClasses","Counter","Invisible","UserRow","UserCol","First","OutboxUser","MailBox","cssMain","HomeButton","length","NoMails","SendForm","useForm","register","handleSubmit","errors","data","Date","getTime","onFailure","Form","onSubmit","FormContent","FormHead","InputBlock","Invalid","name","placeholder","required","maxLength","minLength","rows","Submit","Routs","location","useLocation","path","exact","component","connect","ProviderWrapper","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.b5e57d8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"SendForm_Form__35jM1\",\"FormHead\":\"SendForm_FormHead__1sg08\",\"FormContent\":\"SendForm_FormContent__3DVky\",\"InputBlock\":\"SendForm_InputBlock__1Cz32\",\"Invalid\":\"SendForm_Invalid__RxoS_\",\"Message\":\"SendForm_Message__1CPdO\",\"Submit\":\"SendForm_Submit__c3W_f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\",\"BackDrop\":\"Modal_BackDrop__zbdQ0\",\"Body\":\"Modal_Body__iDczr\",\"AutoHeight\":\"Modal_AutoHeight__1lWhU\",\"Title\":\"Modal_Title__2bVOV\",\"CloseButton\":\"Modal_CloseButton__1nzKZ\",\"Content\":\"Modal_Content__CysUg\",\"ButtonsPanel\":\"Modal_ButtonsPanel__1_hpJ\",\"Button\":\"Modal_Button__3KN0Z\",\"Ok\":\"Modal_Ok__14Xsu\",\"Cancel\":\"Modal_Cancel__3np9i\",\"ContentAutoHeight\":\"Modal_ContentAutoHeight__1nCpy\",\"Message\":\"Modal_Message__fVJw5\"};","const appConstants = {\n  store: {\n    route: {\n      messages: \"messages\",\n      users: \"users\",\n    },\n  },\n  router: {\n    root: \"/\",\n    sendForm: \"/sendform\",\n    inbox: \"/inbox\",\n    outbox: \"/outbox\",\n  },\n  destinations: {\n    inbox: 'inbox',\n    outbox: 'outbox'\n  },\n  events: {\n    scroll: 'scroll'\n  },\n  scroll: {\n    direction: {\n      down: 'down',\n      top: 'top'\n    }\n  }\n};\n\nexport default appConstants;\n","import React from 'react'\nimport { createPortal } from 'react-dom'\nimport css from './Modal.module.scss'\nimport ClassNames from 'classnames'\n\nconst Modal = (props) => {\n    \n    const { onClose, autoHeight } = props\n    \n    const onLocalClick = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n    }\n    \n    return createPortal(\n        <div className={css.Modal}>\n            <div className={css.BackDrop} onClick={onClose}/>\n            <div className={ClassNames(css.Body, {\n                [ css.AutoHeight ]: autoHeight\n            })} onClick={onLocalClick}>\n                {props.children}\n            </div>\n        \n        </div>,\n        document.getElementById('portal'))\n}\n\nexport default Modal\n","import React from 'react'\nimport css from './Modal.module.scss'\nimport ClassNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nconst YesNoDialog = (props) => {\n    const { header, text, onClose, onSuccess } = props\n    return (\n        <div>\n            <div className={css.Title}>\n                {header}\n                <div className={css.CloseButton} onClick={onClose}>X</div>\n            </div>\n            <div className={ClassNames(css.Content, css.ContentAutoHeight)}>\n                <div className={css.Message}>{text}</div>\n                <div className={css.ButtonsPanel}>\n                    <button className={ClassNames(css.Button, css.Cancel)} onClick={onClose}>No</button>\n                    <button className={ClassNames(css.Button, css.Ok)} onClick={onSuccess}>Yes</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nYesNoDialog.propTypes = {\n    header: PropTypes.string,\n    text: PropTypes.string.isRequired,\n    onClose: PropTypes.func,\n    onSuccess: PropTypes.func.isRequired\n}\n\nexport default YesNoDialog\n","import { createRoutine } from 'redux-saga-routines'\n\nconst identity = (value = {}) => value\n\n\nconst createActionsCreatorFlat = (zone_prefix, action_type, payloadCreator = identity, metaCreator = identity) => {\n    const BASE_TYPE = `${zone_prefix}/${action_type}`\n\n    return createRoutine(BASE_TYPE, payloadCreator, metaCreator)\n}\n\nexport const createActionsCreator = (zone_prefix) => {\n    return (action_type, payloadCreator = identity, metaCreator = identity) => {\n        return createActionsCreatorFlat(zone_prefix, action_type, payloadCreator, metaCreator)\n    }\n}","import { createActionsCreator } from 'store/actionCreatorsFactory'\n\nconst createAction = createActionsCreator('MESSAGES')\n\nexport const addMessage = createAction('ADD_MESSAGE')\nexport const clearMessages = createAction('CLEAR_MESSAGES')\nexport const markMessagesReadForUser = createAction('MARK_MESSAGES_READ_FOR_USER')\n","import { createActionsCreator } from 'store/actionCreatorsFactory'\n\nconst createAction = createActionsCreator('USERS')\n\nexport const updateUser = createAction('UPDATE')\nexport const clearUsers = createAction('CLEAR')\nexport const markAllRead = createAction('MARK_ALL_READ')\n","import { createBrowserHistory } from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history","import { all, delay, put, takeEvery } from 'redux-saga/effects'\n\nimport * as ACTIONS from './actions'\nimport { updateUser } from 'store/users/actions'\nimport appConstants from 'common/appConstants'\nimport history from 'common/history'\n\nexport function* addMessageHandler(action) {\n    yield put(ACTIONS.addMessage.request(action.payload))\n    try {\n        const { userId, username, destination, createdAt, messageId } = action.payload\n        yield put(updateUser({\n            userId,\n            username,\n            messageId,\n            destination,\n            createdAt\n        }))\n        \n        yield put(ACTIONS.addMessage.success(action.payload))\n        \n        yield delay(0.5)\n        if (destination === appConstants.destinations.inbox) {\n            history.push(appConstants.router.inbox)\n        } else {\n            history.push(appConstants.router.outbox)\n        }\n    } catch (e) {\n        yield put(ACTIONS.addMessage.failure(e))\n    }\n}\n\nexport function* clearMessagesHandler(action) {\n    yield put(ACTIONS.clearMessages.success(action.payload))\n}\n\nexport function* markMessagesReadForUserHandler(action) {\n    yield put(ACTIONS.markMessagesReadForUser.success(action.payload))\n}\n\nexport function* watchMessagesSaga() {\n    yield all([\n        takeEvery(ACTIONS.addMessage.TRIGGER, addMessageHandler),\n        takeEvery(ACTIONS.clearMessages.TRIGGER, clearMessagesHandler),\n        takeEvery(ACTIONS.markMessagesReadForUser.TRIGGER, markMessagesReadForUserHandler),\n    \n    ])\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport * as ACTIONS from \"./actions\";\n\nexport function* updateUserHandler(action) {\n    yield put(ACTIONS.updateUser.request(action.payload));\n    try {\n        const { userId, username, destination, createdAt, messageId } = action.payload;\n        if (userId) {\n            yield put(\n                ACTIONS.updateUser.success({\n                    user: { userId, username },\n                    destination,\n                    messageId,\n                    createdAt,\n                })\n            );\n        }\n    } catch (e) {\n        yield put(ACTIONS.updateUser.failure(action.payload));\n    }\n}\n\nexport function* clearUsersHandler() {\n    yield put(ACTIONS.clearUsers.success())\n}\n\nexport function* markAllReadHandler(action) {\n    yield put(ACTIONS.markAllRead.success(action.payload))\n}\n\nexport function* watchUsersSaga() {\n    yield all([\n        takeEvery(ACTIONS.updateUser.TRIGGER, updateUserHandler),\n        takeEvery(ACTIONS.clearUsers.TRIGGER, clearUsersHandler),\n        takeEvery(ACTIONS.markAllRead.TRIGGER, markAllReadHandler),\n    \n    ]);\n    \n}\n","import { all, spawn } from \"redux-saga/effects\";\n\nimport { watchMessagesSaga } from \"store/messages/sagas\";\nimport { watchUsersSaga } from \"store/users/sagas\";\n\nexport const sagas = function* rootSaga() {\n  yield all([ spawn(watchMessagesSaga), spawn(watchUsersSaga) ]);\n};\n","import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\nimport _ from 'lodash/core'\n\nexport const initialState = {\n    [ appConstants.destinations.inbox ]: {\n        all: {},\n        ordered: []\n    },\n    [ appConstants.destinations.outbox ]: {\n        all: {},\n        ordered: []\n    },\n};\n\nconst messagesReducer = (initState = { ...initialState }, action = {}) =>\n    produce(initState, (state) => {\n        switch (action.type) {\n            case ACTIONS.addMessage.REQUEST: {\n                return;\n            }\n            case ACTIONS.addMessage.SUCCESS: {\n                const { messageId, destination } = action.payload\n                if (messageId) {\n                    state[ destination ].all[ messageId ] = { ...action.payload, read: false }\n                    state[ destination ].ordered.push(messageId)\n                }\n                return;\n            }\n            \n            case ACTIONS.markMessagesReadForUser.SUCCESS: {\n                const { userId } = action.payload\n                if (userId) {\n                    _.forEach(state[ appConstants.destinations.inbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.inbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                    _.forEach(state[ appConstants.destinations.outbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.outbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                }\n                return;\n            }\n            \n            case ACTIONS.addMessage.FAILURE: {\n                return;\n            }\n            \n            case ACTIONS.clearMessages.SUCCESS: {\n                return {\n                    ...initialState\n                }\n            }\n            \n            default: {\n                return;\n            }\n        }\n    });\n\nexport default messagesReducer\n","import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\n\nexport const initialState = {\n  users: {},\n  [ appConstants.destinations.inbox ]: {},\n  [ appConstants.destinations.outbox ]: {},\n};\n\nconst usersReducer = (initState = { ...initialState }, action = {}) =>\n    produce(initState, (state) => {\n      switch (action.type) {\n        case ACTIONS.updateUser.REQUEST: {\n          return;\n        }\n        case ACTIONS.updateUser.SUCCESS: {\n          const { user, destination, createdAt, messageId } = action.payload;\n          if (user && user.userId) {\n            state.users[ user.userId ] = { ...user };\n          }\n          if (state[ destination ]) {\n            if (state[ destination ][ user.userId ]) {\n              state[ destination ][ user.userId ].count += 1;\n              state[ destination ][ user.userId ].lastUpdate = createdAt;\n              state[ destination ][ user.userId ].lastMessageId = messageId;\n            } else {\n              state[ destination ][ user.userId ] = {\n                count: 1,\n                lastUpdate: createdAt,\n                lastMessageId: messageId\n              };\n            }\n          }\n          return;\n        }\n        case ACTIONS.updateUser.FAILURE: {\n          return;\n        }\n        \n        case ACTIONS.markAllRead.SUCCESS: {\n          const { userId } = action.payload\n          if (state[ appConstants.destinations.inbox ][ userId ]) {\n            state[ appConstants.destinations.inbox ][ userId ].count = 0\n          }\n          if (state[ appConstants.destinations.outbox ][ userId ]) {\n            state[ appConstants.destinations.outbox ][ userId ].count = 0\n          }\n          return;\n        }\n        case ACTIONS.clearUsers.SUCCESS: {\n          return {\n            ...initState\n          }\n        }\n        \n        default: {\n          return;\n        }\n      }\n    });\n\nexport default usersReducer\n","import { combineReducers } from 'redux'\nimport messages from 'store/messages/reducer'\nimport users from 'store/users/reducer'\nimport appConstants from 'common/appConstants'\n\nconst rootReducer = combineReducers({\n    [ appConstants.store.route.messages ]: messages,\n    [ appConstants.store.route.users ]: users,\n})\n\nexport default rootReducer\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { sagas as rootSagas } from 'store/sagas'\nimport rootReducer from 'store/reducers'\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist-indexeddb-storage';\n\nconst initialState = {}\n\nconst persistConfig = {\n    timeout: 0,\n    key: 'email-app-root-key',\n    storage: storage('appDB'),\n    whitelist: [ \"messages\", \"users\" ]\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst saga = createSagaMiddleware()\n\nconst middlewares = [ saga ]\n\nconst store = createStore(persistedReducer, initialState, compose(applyMiddleware(...middlewares)))\n\nsaga.run(rootSagas)\n\nexport default store\n","import { applyMiddleware, createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport { sagas as rootSagas } from 'store/sagas'\nimport rootReducer from 'store/reducers'\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist-indexeddb-storage';\n\nconst initialState = {}\n\nconst persistConfig = {\n    timeout: 0,\n    key: 'email-app-root-key',\n    storage: storage('appDB'),\n    whitelist: [ \"messages\", \"users\" ]\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst saga = createSagaMiddleware()\n\nconst middlewares = [ saga ]\n\nconst composeEnhancers = composeWithDevTools({})\n\nconst store = createStore(persistedReducer, initialState, composeEnhancers(applyMiddleware(...middlewares)))\n\nsaga.run(rootSagas)\n\nexport default store\n","import { persistStore } from 'redux-persist';\nimport StoreProd from './configStore/store.prod'\nimport StoreDev from './configStore/store.dev'\n\nlet store\nif (process.env.NODE_ENV === 'production') {\n    store = StoreProd\n} else {\n    store = StoreDev\n}\n\nexport const persistor = persistStore(store)\n\n//persistor.purge()\n\nexport default store\n","import appConstants from \"common/appConstants\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport css from \"./Main.module.scss\";\nimport Modal from 'components/Modal';\nimport YesNoDialog from 'components/Modal/YesNoDialog';\nimport { persistor } from 'store/store'\nimport { useDispatch } from 'react-redux';\nimport { clearUsers } from 'store/users/actions';\nimport { clearMessages } from 'store/messages/actions';\n\nconst Main = () => {\n    const dispatch = useDispatch()\n    const [ showDialog, setShowDialog ] = useState(false)\n    const onClickCleanUp = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowDialog(true)\n    }\n    \n    const onClose = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowDialog(false)\n    }\n    \n    const onSuccess = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        persistor.purge()\n        dispatch(clearMessages())\n        dispatch(clearUsers())\n        setShowDialog(false)\n    }\n    \n    return (\n        <div className={css.Container}>\n            <div className={css.Content}>\n                <div>\n                    <div className={css.LinkBlock}>\n                        <Link to={appConstants.router.sendForm}>Send e-mail</Link>\n                    </div>\n                    <div className={css.LinkBlock}>\n                        <Link to={appConstants.router.inbox}>Inbox</Link>\n                    </div>\n                    <div className={css.LinkBlock}>\n                        <Link to={appConstants.router.outbox}>Outbox</Link>\n                    </div>\n                    <div className={css.LinkBlock}>\n                        <button onClick={onClickCleanUp} className={css.RemoveButton}>Remove persistent data</button>\n                    </div>\n                    \n                    {showDialog && <Modal onClose={onClose} autoHeight>\n                        <YesNoDialog text={<>\n                            <div>It will remove all data from the persistent storage.</div>\n                            <div>Are you sure?</div>\n                        </>} onSuccess={onSuccess} header='Cleaning up storage' onClose={onClose}/>\n                    </Modal>}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import EventEmitter from 'eventemitter3'\n\nconst globalEmitter = new EventEmitter()\n\nglobalEmitter.on('error', (err) => {\n    console.error(err)\n})\n\nexport default globalEmitter\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport ScrollBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\nimport EventHub from 'service/EventEmmitter';\nimport appConstants from 'common/appConstants';\n\nconst Scrollbar = (props) => {\n    const { id, ref, ...rest } = props\n    const scrollEl = useRef();\n    \n    const onScroll = useCallback((event) => {\n        const { direction, scrollId } = event\n        if (id === scrollId) {\n            if (scrollEl.current) {\n                window.MyScroll = scrollEl.current\n                const { contentEl, contentWrapperEl } = scrollEl.current\n                debugger\n    \n                if (direction === appConstants.scroll.direction.top) {\n                    contentWrapperEl.scrollTop = 0\n                } else if (direction === appConstants.scroll.direction.down) {\n                    if (contentWrapperEl.offsetHeight < contentEl.offsetHeight) {\n                        contentWrapperEl.scrollTop = contentEl.offsetHeight - contentWrapperEl.offsetHeight\n                    }\n                }\n            }\n        }\n    \n    }, [ id ])\n    useEffect(() => {\n        EventHub.on(appConstants.events.scroll, onScroll)\n        return () => {\n            EventHub.off(appConstants.events.scroll, onScroll)\n        }\n    }, [ onScroll ])\n    \n    \n    return (<ScrollBar {...rest} ref={scrollEl} style={{ width: '100%', height: '100%' }}/>)\n}\n\nexport default Scrollbar\n","import { createSelector } from 'reselect'\nimport appConstants from 'common/appConstants'\nimport _ from 'lodash/core'\n\nexport const getUsersState = createSelector(\n    [\n        (state) => {\n            return state[ appConstants.store.route.users ]\n        },\n    ],\n    (usersState) => usersState,\n)\n\nexport const getUsersAll = createSelector(\n    [\n        getUsersState\n    ],\n    (usersState) => {\n        try {\n            return usersState.users ? usersState.users : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getUsersAllById = createSelector(\n    [\n        getUsersAll,\n        (state, id) => id\n    ],\n    (users, id) => {\n        try {\n            return users[ id ] ? users[ id ] : null\n        } catch (e) {\n        }\n        return null\n    },\n)\n\nexport const getUsersAllByIdUserName = createSelector(\n    [\n        getUsersAllById,\n    ],\n    (user) => {\n        try {\n            return user[ 'username' ] ? user[ 'username' ] : ''\n        } catch (e) {\n        }\n        return ''\n    },\n)\n\nexport const getUsersInbox = createSelector(\n    [\n        getUsersState\n    ],\n    (usersState) => {\n        try {\n            return usersState[ appConstants.destinations.inbox ] ? usersState[ appConstants.destinations.inbox ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\nexport const getUsersOutbox = createSelector(\n    [\n        getUsersState\n    ],\n    (usersState) => {\n        try {\n            return usersState[ appConstants.destinations.outbox ] ? usersState[ appConstants.destinations.outbox ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getUsersInboxById = createSelector(\n    [\n        getUsersInbox,\n        (state, id) => id\n    ],\n    (users, userId) => {\n        try {\n            return users[ userId ] ? users[ userId ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\nexport const getUsersOutboxById = createSelector(\n    [\n        getUsersOutbox,\n        (state, id) => id\n    ],\n    (users, userId) => {\n        try {\n            return users[ userId ] ? users[ userId ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getUsersInboxByIdCount = createSelector(\n    [\n        getUsersInboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'count' ] ? user[ 'count' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\nexport const getUsersInboxByIdLastUpdate = createSelector(\n    [\n        getUsersInboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'lastUpdate' ] ? user[ 'lastUpdate' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\nexport const getUsersInboxByIdLastMessageId = createSelector(\n    [\n        getUsersInboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'lastMessageId' ] ? user[ 'lastMessageId' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\nexport const getUsersOutboxByIdCount = createSelector(\n    [\n        getUsersOutboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'count' ] ? user[ 'count' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\nexport const getUsersOutboxByIdLastUpdate = createSelector(\n    [\n        getUsersOutboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'lastUpdate' ] ? user[ 'lastUpdate' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\nexport const getUsersOutboxByIdLastMessageId = createSelector(\n    [\n        getUsersOutboxById\n    ],\n    (user) => {\n        try {\n            return user[ 'lastMessageId' ] ? user[ 'lastMessageId' ] : 0\n        } catch (e) {\n        }\n        return 0\n    },\n)\n\nexport const getUsersInboxWithMessages = createSelector(\n    [\n        getUsersInbox\n    ],\n    (users) => {\n        try {\n            return _.chain(users)\n            .map((user, id) => {\n                return {\n                    id,\n                    ...user,\n                }\n            })\n            .sort((a, b) => {\n                return b.lastUpdate - a.lastUpdate\n            })\n            .value()\n        } catch (e) {\n            console.log(e)\n        }\n        return []\n    },\n)\nexport const getUsersOutboxWithMessages = createSelector(\n    [\n        getUsersOutbox\n    ],\n    (users) => {\n        try {\n            return _.chain(users)\n            .map((user, id) => {\n                return {\n                    id,\n                    ...user,\n                }\n            })\n            .value()\n        } catch (e) {\n        }\n        return []\n    },\n)\n","import { createSelector } from 'reselect'\nimport appConstants from 'common/appConstants'\nimport _ from 'lodash/core'\n\nexport const getMessagesState = createSelector(\n    [\n        (state) => {\n            return state[ appConstants.store.route.messages ]\n        },\n    ],\n    (messagesState) => messagesState,\n)\n\nexport const getMessagesInbox = createSelector(\n    [\n        getMessagesState\n    ],\n    (messagesState) => {\n        try {\n            return messagesState[ appConstants.destinations.inbox ] ? messagesState[ appConstants.destinations.inbox ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getMessagesOutbox = createSelector(\n    [\n        getMessagesState\n    ],\n    (messagesState) => {\n        try {\n            return messagesState[ appConstants.destinations.outbox ] ? messagesState[ appConstants.destinations.outbox ] : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getMessagesInboxAll = createSelector(\n    [\n        getMessagesInbox,\n    ],\n    (messages) => {\n        try {\n            return messages.all ? messages.all : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\n\nexport const getMessagesInboxOrdered = createSelector(\n    [\n        getMessagesInbox,\n    ],\n    (messages) => {\n        try {\n            return messages.ordered ? messages.ordered : []\n        } catch (e) {\n        }\n        return []\n    },\n)\n\nexport const getMessagesOutboxAll = createSelector(\n    [\n        getMessagesOutbox,\n    ],\n    (messages) => {\n        try {\n            return messages.all ? messages.all : {}\n        } catch (e) {\n        }\n        return {}\n    },\n)\nexport const getMessagesOutboxOrdered = createSelector(\n    [\n        getMessagesOutbox,\n    ],\n    (messages) => {\n        try {\n            return messages.ordered ? messages.ordered : []\n        } catch (e) {\n        }\n        return []\n    },\n)\n\nexport const getMessagesInboxById = createSelector(\n    [\n        getMessagesInboxAll,\n        (state, id) => id\n    ],\n    (messages, id) => {\n        try {\n            return messages[ id ] ? messages[ id ] : null\n        } catch (e) {\n        }\n        return null\n    },\n)\nexport const getMessagesInboxByIdSubject = createSelector(\n    [\n        getMessagesInboxById\n    ],\n    (message) => {\n        try {\n            return message[ 'subject' ] ? message[ 'subject' ] : ''\n        } catch (e) {\n        }\n        return ''\n    },\n)\nexport const getMessagesInboxByIdBody = createSelector(\n    [\n        getMessagesInboxById\n    ],\n    (message) => {\n        try {\n            return message[ 'body' ] ? message[ 'body' ] : ''\n        } catch (e) {\n        }\n        return ''\n    },\n)\n\nexport const getMessagesOutboxById = createSelector(\n    [\n        getMessagesOutboxAll,\n        (state, id) => id\n    ],\n    (messages, id) => {\n        try {\n            return messages[ id ] ? messages[ id ] : null\n        } catch (e) {\n        }\n        return null\n    },\n)\n\nexport const getMessagesOutboxByIdSubject = createSelector(\n    [\n        getMessagesOutboxById\n    ],\n    (message) => {\n        try {\n            return message[ 'subject' ] ? message[ 'subject' ] : ''\n        } catch (e) {\n        }\n        return ''\n    },\n)\nexport const getMessagesOutboxByIdBody = createSelector(\n    [\n        getMessagesOutboxById\n    ],\n    (message) => {\n        try {\n            return message[ 'body' ] ? message[ 'body' ] : ''\n        } catch (e) {\n        }\n        return ''\n    },\n)\n\nexport const getMessagesAll = createSelector(\n    [\n        getMessagesInboxAll,\n        getMessagesOutboxAll,\n    ],\n    (inbox, outbox) => {\n        try {\n            return {\n                ...inbox,\n                ...outbox\n            }\n            \n        } catch (e) {\n        }\n        return {}\n    }\n)\n\nexport const getMessagesAllById = createSelector(\n    [\n        getMessagesAll,\n        (state, id) => id\n    ],\n    (all, id) => {\n        try {\n            return all[ id ] ? all[ id ] : null\n            \n        } catch (e) {\n        }\n        return null\n    }\n)\n\nexport const getMessagesAllByUserId = createSelector(\n    [\n        getMessagesAll,\n        (state, id) => id\n    ],\n    (all, userId) => {\n        try {\n            return _.chain(all)\n            .filter(message => message.userId === userId)\n            .sort((a, b) => a.createdAt - b.createdAt)\n            .value()\n        } catch (e) {\n        }\n        return []\n    },\n)\n\nexport const getMessagesAllByIdIsInbox = createSelector(\n    [\n        getMessagesAllById,\n    ],\n    (message) => {\n        try {\n            return message ? message.destination === appConstants.destinations.inbox : false\n            \n        } catch (e) {\n        }\n        return false\n    }\n)\n\nexport const getMessagesAllByIdIsOutbox = createSelector(\n    [\n        getMessagesAllById,\n    ],\n    (message) => {\n        try {\n            return message ? message.destination === appConstants.destinations.outbox : false\n            \n        } catch (e) {\n        }\n        return false\n    }\n)\n\nexport const getMessagesAllByIdSubject = createSelector(\n    [\n        getMessagesAllById,\n    ],\n    (message) => {\n        try {\n            return message[ 'subject' ] ? message[ 'subject' ] : ''\n            \n        } catch (e) {\n        }\n        return ''\n    }\n)\n\nexport const getMessagesAllByIdBody = createSelector(\n    [\n        getMessagesAllById,\n    ],\n    (message) => {\n        try {\n            return message[ 'body' ] ? message[ 'body' ] : ''\n            \n        } catch (e) {\n        }\n        return ''\n    }\n)\nexport const getMessagesAllByIdIsRead = createSelector(\n    [\n        getMessagesAllById,\n    ],\n    (message) => {\n        try {\n            return message[ 'read' ] ? !!message[ 'read' ] : false\n            \n        } catch (e) {\n        }\n        return false\n    }\n)\n\n","import React, { useMemo } from 'react'\nimport { shallowEqual, useSelector } from 'react-redux';\nimport {\n    getMessagesAllByIdBody,\n    getMessagesAllByIdIsInbox,\n    getMessagesAllByIdIsOutbox,\n    getMessagesAllByIdIsRead,\n    getMessagesAllByIdSubject\n} from 'store/messages/selectors';\nimport ClassNames from 'classnames'\nimport css from './UserMessage.module.scss'\n\nconst UserMessage = (props) => {\n    const { id } = props\n    \n    //const message = useSelector(state => getMessagesAllById(state, id), shallowEqual)\n    const isInbox = useSelector(state => getMessagesAllByIdIsInbox(state, id), shallowEqual)\n    const isOutbox = useSelector(state => getMessagesAllByIdIsOutbox(state, id), shallowEqual)\n    const subject = useSelector(state => getMessagesAllByIdSubject(state, id), shallowEqual)\n    const body = useSelector(state => getMessagesAllByIdBody(state, id), shallowEqual)\n    const isRead = useSelector(state => getMessagesAllByIdIsRead(state, id), shallowEqual)\n    \n    const RowClasses = useMemo(() => ClassNames(css.UserMessage, {\n        [ css.Inbox ]: isInbox,\n        [ css.Outbox ]: isOutbox,\n        [ css.IsRead ]: isRead\n    }), [ isInbox, isOutbox, isRead ])\n    return (\n        <div className={RowClasses}>\n            <div className={css.MessageBox}>\n                <div className={css.Header}>{subject}</div>\n                <div className={css.Body}>{body}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserMessage\n","import React, { useEffect, useState } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getMessagesAllByUserId } from 'store/messages/selectors';\nimport { UserMessage } from '../Message';\nimport { getUsersAllByIdUserName } from 'store/users/selectors';\nimport css from './Modal.module.scss'\nimport { Scrollbar } from '../index';\nimport { markAllRead } from 'store/users/actions';\nimport { markMessagesReadForUser } from 'store/messages/actions';\nimport uuid from 'react-uuid'\nimport EventHub from 'service/EventEmmitter'\nimport appConstants from 'common/appConstants';\n\nconst UserMessages = (props) => {\n    const { id, onClose } = props\n    const dispatch = useDispatch()\n    const userName = useSelector(state => getUsersAllByIdUserName(state, id), shallowEqual)\n    const messages = useSelector(state => getMessagesAllByUserId(state, id), shallowEqual)\n    const [ scrollId ] = useState(uuid())\n    \n    useEffect(() => {\n        if (id) {\n            dispatch(markAllRead({ userId: id }))\n        }\n        return () => {\n            if (id) {\n                dispatch(markMessagesReadForUser({ userId: id }))\n            }\n        }\n    }, [ id, dispatch ])\n    \n    useEffect(() => {\n        setTimeout(() => {\n            EventHub.emit(appConstants.events.scroll, { scrollId, direction: appConstants.scroll.direction.down })\n        }, 0)\n    \n    }, [ scrollId ])\n    \n    \n    return (\n        <div>\n            <div className={css.Title}>\n                Messages for {userName}\n                <div className={css.CloseButton} onClick={onClose}>X</div>\n            </div>\n            <div className={css.Content}>\n                <Scrollbar id={scrollId}>\n                    {\n                        messages.map((message => <UserMessage id={message.messageId} key={message.messageId}/>))\n                    }\n                </Scrollbar>\n            </div>\n        </div>\n    )\n}\n\nexport default UserMessages\n","import React, { useMemo, useState } from \"react\";\nimport css from './User.module.scss'\nimport ClassNames from 'classnames'\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { getUsersAllByIdUserName, getUsersInboxByIdCount, getUsersInboxByIdLastMessageId } from 'store/users/selectors';\nimport { getMessagesInboxByIdBody, getMessagesInboxByIdSubject } from 'store/messages/selectors';\nimport Modal from '../Modal';\nimport UserMessages from '../Modal/UserMessages';\n\nconst InboxUser = (props) => {\n    const { user } = props\n    const [ showPopup, setShowPopup ] = useState(false)\n    const userName = useSelector(state => getUsersAllByIdUserName(state, user.id), shallowEqual)\n    const count = useSelector(state => getUsersInboxByIdCount(state, user.id), shallowEqual)\n    const messageId = useSelector(state => getUsersInboxByIdLastMessageId(state, user.id), shallowEqual)\n    const subject = useSelector(state => getMessagesInboxByIdSubject(state, messageId), shallowEqual)\n    const body = useSelector(state => getMessagesInboxByIdBody(state, messageId), shallowEqual)\n    \n    const countersClasses = useMemo(() => {\n        return ClassNames(css.Counter, {\n            [ css.Invisible ]: !count\n        })\n    }, [ count ])\n    \n    const onRowClick = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowPopup(true)\n    }\n    const onClose = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowPopup(false)\n    }\n    \n    return <>\n        <div className={css.UserRow} onClick={onRowClick}>\n            <div className={ClassNames(css.UserCol, css.First)}>\n                <div className={countersClasses}>{count}</div>\n                <div>{userName}</div>\n            </div>\n            <div className={css.UserCol}>{subject}</div>\n            <div className={css.UserCol}>{body}</div>\n        </div>\n        {showPopup && <Modal onClose={onClose}><UserMessages id={user.id} onClose={onClose}/></Modal>}\n    </>\n}\n\nexport default InboxUser\n","import React, { useMemo, useState } from \"react\";\nimport css from './User.module.scss'\nimport { shallowEqual, useSelector } from 'react-redux';\nimport {\n    getUsersAllByIdUserName,\n    getUsersOutboxByIdCount,\n    getUsersOutboxByIdLastMessageId\n} from 'store/users/selectors';\nimport { getMessagesOutboxByIdBody, getMessagesOutboxByIdSubject } from 'store/messages/selectors';\nimport ClassNames from 'classnames';\nimport Modal from '../Modal';\nimport UserMessages from '../Modal/UserMessages';\n\nconst OutboxUser = (props) => {\n    const { user } = props\n    const [ showPopup, setShowPopup ] = useState(false)\n    const userName = useSelector(state => getUsersAllByIdUserName(state, user.id), shallowEqual)\n    const count = useSelector(state => getUsersOutboxByIdCount(state, user.id), shallowEqual)\n    const messageId = useSelector(state => getUsersOutboxByIdLastMessageId(state, user.id), shallowEqual)\n    const subject = useSelector(state => getMessagesOutboxByIdSubject(state, messageId), shallowEqual)\n    const body = useSelector(state => getMessagesOutboxByIdBody(state, messageId), shallowEqual)\n    \n    const countersClasses = useMemo(() => {\n        return ClassNames(css.Counter, {\n            [ css.Invisible ]: !count\n        })\n    }, [ count ])\n    \n    const onRowClick = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowPopup(true)\n    }\n    const onClose = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        setShowPopup(false)\n    }\n    \n    return <>\n        <div className={css.UserRow} onClick={onRowClick}>\n            <div className={ClassNames(css.UserCol, css.First)}>\n                <div className={countersClasses}>{count}</div>\n                <div>{userName}</div>\n            </div>\n            <div className={css.UserCol}>{subject}</div>\n            <div className={css.UserCol}>{body}</div>\n        </div>\n        {showPopup && <Modal onClose={onClose}><UserMessages id={user.id} onClose={onClose}/></Modal>}\n    </>\n}\n\nexport default OutboxUser\n","import React from \"react\";\nimport css from \"./MailBox.module.scss\";\nimport cssMain from \"../../containers/Main/Main.module.scss\";\nimport { Scrollbar } from \"components\";\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { getUsersInboxWithMessages, getUsersOutboxWithMessages } from 'store/users/selectors'\nimport appConstants from 'common/appConstants';\nimport InboxUser from '../Users/InboxUser';\nimport OutboxUser from '../Users/OutboxUser';\nimport history from 'common/history'\n\nconst MailBox = (props) => {\n    const { direction } = props;\n    \n    const users = useSelector((state) => {\n        return direction === appConstants.destinations.inbox ? getUsersInboxWithMessages(state) : getUsersOutboxWithMessages(state)\n    }, shallowEqual)\n    \n    const onGoHome = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        history.push(appConstants.router.root)\n    }\n    \n    return (\n        <div className={css.Container}>\n            <div className={css.MailBox}>\n                <div className={css.Header}>\n                    <div className={cssMain.HomeButton} onClick={onGoHome}>&#127968;</div>\n                    {direction}</div>\n                <div className={css.Body}>\n                    <Scrollbar>\n                        <div>\n                            {users.map(user => (\n                                direction === appConstants.destinations.inbox ? <InboxUser user={user} key={user.id}/> :\n                                    <OutboxUser user={user} key={user.id}/>\n                            ))}\n                        </div>\n                        {(users && users.length === 0) && (\n                            <div className={css.NoMails}>No mails yet</div>\n                        )}\n                    </Scrollbar>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MailBox;\n","import React from \"react\";\nimport css from './Box.module.scss'\nimport { MailBox } from 'components'\nimport appConstants from \"common/appConstants\";\n\nconst Inbox = () => {\n    return (<div className={css.Container}>\n        <MailBox direction={appConstants.destinations.inbox}></MailBox>\n    </div>);\n};\n\nexport default Inbox;\n\n","import React from \"react\";\nimport css from '../Inbox/Box.module.scss'\nimport { MailBox } from 'components'\nimport appConstants from \"common/appConstants\";\n\nconst Inbox = () => {\n  return (<div className={css.Container}>\n    <MailBox direction={appConstants.destinations.outbox}></MailBox>\n  </div>);\n};\n\nexport default Inbox;\n\n","import appConstants from \"common/appConstants\";\nimport React, { useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport css from \"./SendForm.module.scss\";\nimport ClassNames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { addMessage } from \"store/messages/actions\";\nimport uuid from \"react-uuid\";\nimport cssMain from '../Main/Main.module.scss';\nimport history from 'common/history';\n\nconst SendForm = () => {\n    const dispatch = useDispatch();\n    const { register, handleSubmit, errors } = useForm();\n    const onSuccess = useCallback((data) => {\n        dispatch(\n            addMessage({\n                ...data,\n                createdAt: new Date().getTime(),\n                messageId: uuid(),\n            })\n        );\n    }, [ dispatch ]);\n    \n    const onFailure = useCallback((error) => {\n        console.log(error);\n    }, []);\n    \n    const onGoHome = (e) => {\n        e && e.stopPropagation && e.stopPropagation()\n        history.push(appConstants.router.root)\n    }\n    \n    return (\n        <div className={css.Form}>\n            \n            <form onSubmit={handleSubmit(onSuccess, onFailure)}>\n                <div className={css.FormContent}>\n                    <div className={css.FormHead}>\n                        <div className={cssMain.HomeButton} onClick={onGoHome}>&#127968;</div>\n                        Send email\n                    </div>\n                    <div className={css.InputBlock}>\n                        <label>User Id</label>\n                        <input\n                            className={ClassNames({ [ css.Invalid ]: !!errors.userId })}\n                            name=\"userId\"\n                            placeholder=\"User Id\"\n                            ref={register({\n                                required: \"userId field is required\",\n                                maxLength: { value: 100, message: \"max length is 100\" },\n                            })}\n                        />\n                        {errors.userId && (\n                            <div className={css.Message}>{errors.userId.message}</div>\n                        )}\n                    </div>\n                    <div className={css.InputBlock}>\n                        <label>User Name</label>\n                        <input\n                            className={ClassNames({ [ css.Invalid ]: !!errors.username })}\n                            name=\"username\"\n                            placeholder=\"User Name\"\n                            ref={register({\n                                required: \"username field is required\",\n                                minLength: { value: 2, message: \"min length is 2\" },\n                                maxLength: { value: 100, message: \"max length is 100\" },\n                            })}\n                        />\n                        {errors.username && (\n                            <div className={css.Message}>{errors.username.message}</div>\n                        )}\n                    </div>\n                    <div className={css.InputBlock}>\n                        <label>Destimation</label>\n                        <select\n                            className={ClassNames({ [ css.Invalid ]: !!errors.destination })}\n                            name=\"destination\"\n                            placeholder=\"Select...\"\n                            ref={register({ required: true })}\n                        >\n                            <option value={appConstants.destinations.inbox}>Inbox</option>\n                            <option value={appConstants.destinations.outbox}>Outbox</option>\n                        </select>\n                        {errors.destination && (\n                            <div className={css.Message}>{errors.destination.message}</div>\n                        )}\n                    </div>\n                    <div className={css.InputBlock}>\n                        <label>Subject</label>\n                        <input\n                            className={ClassNames({ [ css.Invalid ]: !!errors.subject })}\n                            name=\"subject\"\n                            placeholder=\"Subject\"\n                            ref={register({\n                                required: \"subject field is required\",\n                                minLength: { value: 5, message: \"min length is 5\" },\n                                maxLength: { value: 100, message: \"max length is 100\" },\n                            })}\n                        />\n                        {errors.subject && (\n                            <div className={css.Message}>{errors.subject.message}</div>\n                        )}\n                    </div>\n                    <div className={css.InputBlock}>\n                        <label>Body</label>\n                        <textarea rows={5}\n                                  className={ClassNames({ [ css.Invalid ]: !!errors.body })}\n                                  name=\"body\"\n                                  placeholder=\"Body\"\n                                  ref={register({\n                                      required: \"body field is required\",\n                                      minLength: { value: 5, message: \"min length is 5\" },\n                                      maxLength: { value: 200, message: \"max length is 200\" },\n                                  })}\n                        >{''}</textarea>\n                        {errors.body && (\n                            <div className={css.Message}>{errors.body.message}</div>\n                        )}\n                    </div>\n                    <div className={css.InputBlock}>\n                        <button className={css.Submit} type=\"submit\">\n                            Submit\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default SendForm;\n","import React from \"react\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport { Inbox, Main, Outbox, SendForm } from \"containers\";\nimport appConstants from \"common/appConstants\";\n\nconst Routs = () => {\n    const { location } = useLocation();\n    return (\n        <Switch location={location}>\n            <Route path={appConstants.router.root} exact component={Main}/>\n            \n            <Route path={appConstants.router.sendForm} component={SendForm}/>\n            \n            <Route path={appConstants.router.inbox} component={Inbox}/>\n            \n            <Route path={appConstants.router.outbox} component={Outbox}/>\n        </Switch>\n    );\n};\n\nexport default Routs;\n","import { connect } from \"react-redux\";\nimport \"./App.css\";\nimport Routs from \"router/routes\";\n\nconst App = () => {\n  return (\n    <div>\n      <Routs />\n    </div>\n  );\n};\n\nexport default connect()(App);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport history from \"common/history\";\nimport { Router } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistor } from \"store/store\";\n\nconst ProviderWrapper = ({ store, children }) => (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <Router history={history}>{children}</Router>\n        </PersistGate>\n    </Provider>\n);\n\nexport default ProviderWrapper;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App, ProviderWrapper } from \"containers\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from 'store/store'\n\nReactDOM.render(\n    <ProviderWrapper store={store}>\n        <App/>\n    </ProviderWrapper>,\n    \n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserRow\":\"User_UserRow__3fi_8\",\"UserCol\":\"User_UserCol__6SjX0\",\"Counter\":\"User_Counter__3vjuc\",\"Invisible\":\"User_Invisible__1Kp8O\",\"First\":\"User_First__1BDqE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Main_Container__3caE0\",\"Content\":\"Main_Content__3AH4F\",\"LinkBlock\":\"Main_LinkBlock__3OnWr\",\"RemoveButton\":\"Main_RemoveButton__2YyXn\",\"HomeButton\":\"Main_HomeButton__Sqdfk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserMessage\":\"UserMessage_UserMessage__1DN9W\",\"Inbox\":\"UserMessage_Inbox__2Xtk9\",\"MessageBox\":\"UserMessage_MessageBox__1b5IJ\",\"Outbox\":\"UserMessage_Outbox__U5GBL\",\"IsRead\":\"UserMessage_IsRead__14TY3\",\"Header\":\"UserMessage_Header__3WW1k\",\"Body\":\"UserMessage_Body__3N7UJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"MailBox_Container__1P_MP\",\"MailBox\":\"MailBox_MailBox__2GDs9\",\"Header\":\"MailBox_Header___JD9p\",\"Body\":\"MailBox_Body__3CkJq\",\"NoMails\":\"MailBox_NoMails__FztvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Box_Container__3mbkX\"};"],"sourceRoot":""}