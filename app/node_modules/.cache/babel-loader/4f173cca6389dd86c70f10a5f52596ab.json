{"ast":null,"code":"import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\nimport _ from 'lodash/core';\nexport const initialState = {\n  [appConstants.destinations.inbox]: {\n    all: {},\n    ordered: []\n  },\n  [appConstants.destinations.outbox]: {\n    all: {},\n    ordered: []\n  }\n};\n\nconst messagesReducer = (initState = { ...initialState\n}, action = {}) => produce(initState, state => {\n  switch (action.type) {\n    case ACTIONS.addMessage.REQUEST:\n      {\n        return;\n      }\n\n    case ACTIONS.addMessage.SUCCESS:\n      {\n        const {\n          messageId,\n          destination\n        } = action.payload;\n\n        if (messageId) {\n          state[destination].all[messageId] = { ...action.payload,\n            read: false\n          };\n          state[destination].ordered.push(messageId);\n        }\n\n        return;\n      }\n\n    case ACTIONS.markMessagesReadForUser.SUCCESS:\n      {\n        const {\n          userId\n        } = action.payload;\n\n        if (userId) {\n          _.forEach(state[appConstants.destinations.inbox].all, message => {\n            if (message.userId === userId) {\n              state[appConstants.destinations.inbox].all[message.messageId].read = true;\n            }\n          });\n\n          _.forEach(state[appConstants.destinations.outbox].all, message => {\n            if (message.userId === userId) {\n              state[appConstants.destinations.outbox].all[message.messageId].read = true;\n            }\n          });\n        }\n\n        return;\n      }\n\n    case ACTIONS.addMessage.FAILURE:\n      {\n        return;\n      }\n\n    case ACTIONS.clearMessages.SUCCESS:\n      {\n        return { ...initialState\n        };\n      }\n\n    default:\n      {\n        return;\n      }\n  }\n});\n\nexport default messagesReducer;","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/messages/reducer.js"],"names":["appConstants","produce","ACTIONS","_","initialState","destinations","inbox","all","ordered","outbox","messagesReducer","initState","action","state","type","addMessage","REQUEST","SUCCESS","messageId","destination","payload","read","push","markMessagesReadForUser","userId","forEach","message","FAILURE","clearMessages"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,CAAP,MAAc,aAAd;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxB,GAAEJ,YAAY,CAACK,YAAb,CAA0BC,KAA5B,GAAqC;AACjCC,IAAAA,GAAG,EAAE,EAD4B;AAEjCC,IAAAA,OAAO,EAAE;AAFwB,GADb;AAKxB,GAAER,YAAY,CAACK,YAAb,CAA0BI,MAA5B,GAAsC;AAClCF,IAAAA,GAAG,EAAE,EAD6B;AAElCC,IAAAA,OAAO,EAAE;AAFyB;AALd,CAArB;;AAWP,MAAME,eAAe,GAAG,CAACC,SAAS,GAAG,EAAE,GAAGP;AAAL,CAAb,EAAkCQ,MAAM,GAAG,EAA3C,KACpBX,OAAO,CAACU,SAAD,EAAaE,KAAD,IAAW;AAC1B,UAAQD,MAAM,CAACE,IAAf;AACI,SAAKZ,OAAO,CAACa,UAAR,CAAmBC,OAAxB;AAAiC;AAC7B;AACH;;AACD,SAAKd,OAAO,CAACa,UAAR,CAAmBE,OAAxB;AAAiC;AAC7B,cAAM;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb,YAA6BP,MAAM,CAACQ,OAA1C;;AACA,YAAIF,SAAJ,EAAe;AACXL,UAAAA,KAAK,CAAEM,WAAF,CAAL,CAAqBZ,GAArB,CAA0BW,SAA1B,IAAwC,EAAE,GAAGN,MAAM,CAACQ,OAAZ;AAAqBC,YAAAA,IAAI,EAAE;AAA3B,WAAxC;AACAR,UAAAA,KAAK,CAAEM,WAAF,CAAL,CAAqBX,OAArB,CAA6Bc,IAA7B,CAAkCJ,SAAlC;AACH;;AACD;AACH;;AAED,SAAKhB,OAAO,CAACqB,uBAAR,CAAgCN,OAArC;AAA8C;AAC1C,cAAM;AAAEO,UAAAA;AAAF,YAAaZ,MAAM,CAACQ,OAA1B;;AACA,YAAII,MAAJ,EAAY;AACRrB,UAAAA,CAAC,CAACsB,OAAF,CAAUZ,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAAyCC,GAAnD,EAAyDmB,OAAD,IAAa;AACjE,gBAAIA,OAAO,CAACF,MAAR,KAAmBA,MAAvB,EAA+B;AAC3BX,cAAAA,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAAyCC,GAAzC,CAA8CmB,OAAO,CAACR,SAAtD,EAAkEG,IAAlE,GAAyE,IAAzE;AACH;AACJ,WAJD;;AAKAlB,UAAAA,CAAC,CAACsB,OAAF,CAAUZ,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BI,MAA5B,CAAL,CAA0CF,GAApD,EAA0DmB,OAAD,IAAa;AAClE,gBAAIA,OAAO,CAACF,MAAR,KAAmBA,MAAvB,EAA+B;AAC3BX,cAAAA,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BI,MAA5B,CAAL,CAA0CF,GAA1C,CAA+CmB,OAAO,CAACR,SAAvD,EAAmEG,IAAnE,GAA0E,IAA1E;AACH;AACJ,WAJD;AAKH;;AACD;AACH;;AAED,SAAKnB,OAAO,CAACa,UAAR,CAAmBY,OAAxB;AAAiC;AAC7B;AACH;;AAED,SAAKzB,OAAO,CAAC0B,aAAR,CAAsBX,OAA3B;AAAoC;AAChC,eAAO,EACH,GAAGb;AADA,SAAP;AAGH;;AAED;AAAS;AACL;AACH;AA1CL;AA4CH,CA7CM,CADX;;AAgDA,eAAeM,eAAf","sourcesContent":["import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\nimport _ from 'lodash/core'\n\nexport const initialState = {\n    [ appConstants.destinations.inbox ]: {\n        all: {},\n        ordered: []\n    },\n    [ appConstants.destinations.outbox ]: {\n        all: {},\n        ordered: []\n    },\n};\n\nconst messagesReducer = (initState = { ...initialState }, action = {}) =>\n    produce(initState, (state) => {\n        switch (action.type) {\n            case ACTIONS.addMessage.REQUEST: {\n                return;\n            }\n            case ACTIONS.addMessage.SUCCESS: {\n                const { messageId, destination } = action.payload\n                if (messageId) {\n                    state[ destination ].all[ messageId ] = { ...action.payload, read: false }\n                    state[ destination ].ordered.push(messageId)\n                }\n                return;\n            }\n            \n            case ACTIONS.markMessagesReadForUser.SUCCESS: {\n                const { userId } = action.payload\n                if (userId) {\n                    _.forEach(state[ appConstants.destinations.inbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.inbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                    _.forEach(state[ appConstants.destinations.outbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.outbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                }\n                return;\n            }\n            \n            case ACTIONS.addMessage.FAILURE: {\n                return;\n            }\n            \n            case ACTIONS.clearMessages.SUCCESS: {\n                return {\n                    ...initialState\n                }\n            }\n            \n            default: {\n                return;\n            }\n        }\n    });\n\nexport default messagesReducer\n"]},"metadata":{},"sourceType":"module"}