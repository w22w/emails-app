{"ast":null,"code":"import _slicedToArray from\"/EX_WIN/PROJECTS/MyGithub/emails-app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{shallowEqual,useDispatch,useSelector}from'react-redux';import{getMessagesAllByUserId}from'store/messages/selectors';import{UserMessage}from'../Message';import{getUsersAllByIdUserName}from'store/users/selectors';import css from'./Modal.module.scss';import{Scrollbar}from'../index';import{markAllRead}from'store/users/actions';import{markMessagesReadForUser}from'store/messages/actions';import uuid from'react-uuid';import EventHub from'service/EventEmmitter';import appConstants from'common/appConstants';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UserMessages=function UserMessages(props){var id=props.id,onClose=props.onClose;var dispatch=useDispatch();var userName=useSelector(function(state){return getUsersAllByIdUserName(state,id);},shallowEqual);var messages=useSelector(function(state){return getMessagesAllByUserId(state,id);},shallowEqual);var _useState=useState(uuid()),_useState2=_slicedToArray(_useState,1),scrollId=_useState2[0];useEffect(function(){if(id){dispatch(markAllRead({userId:id}));}return function(){if(id){dispatch(markMessagesReadForUser({userId:id}));}};},[id,dispatch]);useEffect(function(){setTimeout(function(){EventHub.emit(appConstants.events.scroll,{scrollId:scrollId,direction:appConstants.scroll.direction.down});},0);},[scrollId]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:css.Title,children:[\"Messages for \",userName,/*#__PURE__*/_jsx(\"div\",{className:css.CloseButton,onClick:onClose,children:\"X\"})]}),/*#__PURE__*/_jsx(\"div\",{className:css.Content,children:/*#__PURE__*/_jsx(Scrollbar,{id:scrollId,children:messages.map(function(message){return/*#__PURE__*/_jsx(UserMessage,{id:message.messageId},message.messageId);})})})]});};export default UserMessages;","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/components/Modal/UserMessages.js"],"names":["React","useEffect","useState","shallowEqual","useDispatch","useSelector","getMessagesAllByUserId","UserMessage","getUsersAllByIdUserName","css","Scrollbar","markAllRead","markMessagesReadForUser","uuid","EventHub","appConstants","UserMessages","props","id","onClose","dispatch","userName","state","messages","scrollId","userId","setTimeout","emit","events","scroll","direction","down","Title","CloseButton","Content","map","message","messageId"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,YAAT,CAAuBC,WAAvB,CAAoCC,WAApC,KAAuD,aAAvD,CACA,OAASC,sBAAT,KAAuC,0BAAvC,CACA,OAASC,WAAT,KAA4B,YAA5B,CACA,OAASC,uBAAT,KAAwC,uBAAxC,CACA,MAAOC,CAAAA,GAAP,KAAgB,qBAAhB,CACA,OAASC,SAAT,KAA0B,UAA1B,CACA,OAASC,WAAT,KAA4B,qBAA5B,CACA,OAASC,uBAAT,KAAwC,wBAAxC,CACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,YAAP,KAAyB,qBAAzB,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,IACpBC,CAAAA,EADoB,CACJD,KADI,CACpBC,EADoB,CAChBC,OADgB,CACJF,KADI,CAChBE,OADgB,CAE5B,GAAMC,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CACA,GAAMiB,CAAAA,QAAQ,CAAGhB,WAAW,CAAC,SAAAiB,KAAK,QAAId,CAAAA,uBAAuB,CAACc,KAAD,CAAQJ,EAAR,CAA3B,EAAN,CAA8Cf,YAA9C,CAA5B,CACA,GAAMoB,CAAAA,QAAQ,CAAGlB,WAAW,CAAC,SAAAiB,KAAK,QAAIhB,CAAAA,sBAAsB,CAACgB,KAAD,CAAQJ,EAAR,CAA1B,EAAN,CAA6Cf,YAA7C,CAA5B,CAJ4B,cAKPD,QAAQ,CAACW,IAAI,EAAL,CALD,wCAKpBW,QALoB,eAO5BvB,SAAS,CAAC,UAAM,CACZ,GAAIiB,EAAJ,CAAQ,CACJE,QAAQ,CAACT,WAAW,CAAC,CAAEc,MAAM,CAAEP,EAAV,CAAD,CAAZ,CAAR,CACH,CACD,MAAO,WAAM,CACT,GAAIA,EAAJ,CAAQ,CACJE,QAAQ,CAACR,uBAAuB,CAAC,CAAEa,MAAM,CAAEP,EAAV,CAAD,CAAxB,CAAR,CACH,CACJ,CAJD,CAKH,CATQ,CASN,CAAEA,EAAF,CAAME,QAAN,CATM,CAAT,CAWAnB,SAAS,CAAC,UAAM,CACZyB,UAAU,CAAC,UAAM,CACbZ,QAAQ,CAACa,IAAT,CAAcZ,YAAY,CAACa,MAAb,CAAoBC,MAAlC,CAA0C,CAAEL,QAAQ,CAARA,QAAF,CAAYM,SAAS,CAAEf,YAAY,CAACc,MAAb,CAAoBC,SAApB,CAA8BC,IAArD,CAA1C,EACH,CAFS,CAEP,CAFO,CAAV,CAIH,CALQ,CAKN,CAAEP,QAAF,CALM,CAAT,CAQA,mBACI,oCACI,aAAK,SAAS,CAAEf,GAAG,CAACuB,KAApB,2BACkBX,QADlB,cAEI,YAAK,SAAS,CAAEZ,GAAG,CAACwB,WAApB,CAAiC,OAAO,CAAEd,OAA1C,eAFJ,GADJ,cAKI,YAAK,SAAS,CAAEV,GAAG,CAACyB,OAApB,uBACI,KAAC,SAAD,EAAW,EAAE,CAAEV,QAAf,UAEQD,QAAQ,CAACY,GAAT,CAAc,SAAAC,OAAO,qBAAI,KAAC,WAAD,EAAa,EAAE,CAAEA,OAAO,CAACC,SAAzB,EAAyCD,OAAO,CAACC,SAAjD,CAAJ,EAArB,CAFR,EADJ,EALJ,GADJ,CAeH,CAzCD,CA2CA,cAAerB,CAAAA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getMessagesAllByUserId } from 'store/messages/selectors';\nimport { UserMessage } from '../Message';\nimport { getUsersAllByIdUserName } from 'store/users/selectors';\nimport css from './Modal.module.scss'\nimport { Scrollbar } from '../index';\nimport { markAllRead } from 'store/users/actions';\nimport { markMessagesReadForUser } from 'store/messages/actions';\nimport uuid from 'react-uuid'\nimport EventHub from 'service/EventEmmitter'\nimport appConstants from 'common/appConstants';\n\nconst UserMessages = (props) => {\n    const { id, onClose } = props\n    const dispatch = useDispatch()\n    const userName = useSelector(state => getUsersAllByIdUserName(state, id), shallowEqual)\n    const messages = useSelector(state => getMessagesAllByUserId(state, id), shallowEqual)\n    const [ scrollId ] = useState(uuid())\n    \n    useEffect(() => {\n        if (id) {\n            dispatch(markAllRead({ userId: id }))\n        }\n        return () => {\n            if (id) {\n                dispatch(markMessagesReadForUser({ userId: id }))\n            }\n        }\n    }, [ id, dispatch ])\n    \n    useEffect(() => {\n        setTimeout(() => {\n            EventHub.emit(appConstants.events.scroll, { scrollId, direction: appConstants.scroll.direction.down })\n        }, 0)\n    \n    }, [ scrollId ])\n    \n    \n    return (\n        <div>\n            <div className={css.Title}>\n                Messages for {userName}\n                <div className={css.CloseButton} onClick={onClose}>X</div>\n            </div>\n            <div className={css.Content}>\n                <Scrollbar id={scrollId}>\n                    {\n                        messages.map((message => <UserMessage id={message.messageId} key={message.messageId}/>))\n                    }\n                </Scrollbar>\n            </div>\n        </div>\n    )\n}\n\nexport default UserMessages\n"]},"metadata":{},"sourceType":"module"}