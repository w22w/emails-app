{"ast":null,"code":"import { all, put, takeEvery } from \"redux-saga/effects\";\nimport * as ACTIONS from \"./actions\";\nexport function* updateUserHandler(action) {\n  yield put(ACTIONS.updateUser.request(action.payload));\n\n  try {\n    const {\n      userId,\n      username,\n      destination,\n      createdAt,\n      messageId\n    } = action.payload;\n\n    if (userId) {\n      yield put(ACTIONS.updateUser.success({\n        user: {\n          userId,\n          username\n        },\n        destination,\n        messageId,\n        createdAt\n      }));\n    }\n  } catch (e) {\n    yield put(ACTIONS.updateUser.failure(action.payload));\n  }\n}\nexport function* clearUsersHandler() {\n  yield put(ACTIONS.clearUsers.success());\n}\nexport function* markAllReadHandler(action) {\n  yield put(ACTIONS.markAllRead.success(action.payload));\n}\nexport function* watchUsersSaga() {\n  yield all([takeEvery(ACTIONS.updateUser.TRIGGER, updateUserHandler), takeEvery(ACTIONS.clearUsers.TRIGGER, clearUsersHandler), takeEvery(ACTIONS.markAllRead.TRIGGER, markAllReadHandler)]);\n}","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/users/sagas.js"],"names":["all","put","takeEvery","ACTIONS","updateUserHandler","action","updateUser","request","payload","userId","username","destination","createdAt","messageId","success","user","e","failure","clearUsersHandler","clearUsers","markAllReadHandler","markAllRead","watchUsersSaga","TRIGGER"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA,OAAO,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AACvC,QAAMJ,GAAG,CAACE,OAAO,CAACG,UAAR,CAAmBC,OAAnB,CAA2BF,MAAM,CAACG,OAAlC,CAAD,CAAT;;AACA,MAAI;AACA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,WAApB;AAAiCC,MAAAA,SAAjC;AAA4CC,MAAAA;AAA5C,QAA0DR,MAAM,CAACG,OAAvE;;AACA,QAAIC,MAAJ,EAAY;AACR,YAAMR,GAAG,CACLE,OAAO,CAACG,UAAR,CAAmBQ,OAAnB,CAA2B;AACvBC,QAAAA,IAAI,EAAE;AAAEN,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SADiB;AAEvBC,QAAAA,WAFuB;AAGvBE,QAAAA,SAHuB;AAIvBD,QAAAA;AAJuB,OAA3B,CADK,CAAT;AAQH;AACJ,GAZD,CAYE,OAAOI,CAAP,EAAU;AACR,UAAMf,GAAG,CAACE,OAAO,CAACG,UAAR,CAAmBW,OAAnB,CAA2BZ,MAAM,CAACG,OAAlC,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUU,iBAAV,GAA8B;AACjC,QAAMjB,GAAG,CAACE,OAAO,CAACgB,UAAR,CAAmBL,OAAnB,EAAD,CAAT;AACH;AAED,OAAO,UAAUM,kBAAV,CAA6Bf,MAA7B,EAAqC;AACxC,QAAMJ,GAAG,CAACE,OAAO,CAACkB,WAAR,CAAoBP,OAApB,CAA4BT,MAAM,CAACG,OAAnC,CAAD,CAAT;AACH;AAED,OAAO,UAAUc,cAAV,GAA2B;AAC9B,QAAMtB,GAAG,CAAC,CACNE,SAAS,CAACC,OAAO,CAACG,UAAR,CAAmBiB,OAApB,EAA6BnB,iBAA7B,CADH,EAENF,SAAS,CAACC,OAAO,CAACgB,UAAR,CAAmBI,OAApB,EAA6BL,iBAA7B,CAFH,EAGNhB,SAAS,CAACC,OAAO,CAACkB,WAAR,CAAoBE,OAArB,EAA8BH,kBAA9B,CAHH,CAAD,CAAT;AAOH","sourcesContent":["import { all, put, takeEvery } from \"redux-saga/effects\";\nimport * as ACTIONS from \"./actions\";\n\nexport function* updateUserHandler(action) {\n    yield put(ACTIONS.updateUser.request(action.payload));\n    try {\n        const { userId, username, destination, createdAt, messageId } = action.payload;\n        if (userId) {\n            yield put(\n                ACTIONS.updateUser.success({\n                    user: { userId, username },\n                    destination,\n                    messageId,\n                    createdAt,\n                })\n            );\n        }\n    } catch (e) {\n        yield put(ACTIONS.updateUser.failure(action.payload));\n    }\n}\n\nexport function* clearUsersHandler() {\n    yield put(ACTIONS.clearUsers.success())\n}\n\nexport function* markAllReadHandler(action) {\n    yield put(ACTIONS.markAllRead.success(action.payload))\n}\n\nexport function* watchUsersSaga() {\n    yield all([\n        takeEvery(ACTIONS.updateUser.TRIGGER, updateUserHandler),\n        takeEvery(ACTIONS.clearUsers.TRIGGER, clearUsersHandler),\n        takeEvery(ACTIONS.markAllRead.TRIGGER, markAllReadHandler),\n    \n    ]);\n    \n}\n"]},"metadata":{},"sourceType":"module"}