{"ast":null,"code":"var _jsxFileName = \"/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/components/Scrollbar/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport ScrollBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\nimport EventHub from 'service/EventEmmitter';\nimport appConstants from 'common/appConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Scrollbar = props => {\n  _s();\n\n  const {\n    id,\n    ref,\n    ...rest\n  } = props;\n  const scrollEl = useRef();\n  const onScroll = useCallback(event => {\n    const {\n      direction,\n      scrollId\n    } = event;\n\n    if (id === scrollId) {\n      if (scrollEl.current) {\n        window.MyScroll = scrollEl.current;\n        const {\n          contentEl,\n          contentWrapperEl\n        } = scrollEl.current;\n        debugger;\n\n        if (direction === appConstants.scroll.direction.top) {\n          contentWrapperEl.scrollTop = 0;\n        } else if (direction === appConstants.scroll.direction.down) {\n          if (contentWrapperEl.offsetHeight < contentEl.offsetHeight) {\n            contentWrapperEl.scrollTop = contentEl.offsetHeight - contentWrapperEl.offsetHeight;\n          }\n        }\n      }\n    }\n  }, [id]);\n  useEffect(() => {\n    EventHub.on(appConstants.events.scroll, onScroll);\n    return () => {\n      EventHub.off(appConstants.events.scroll, onScroll);\n    };\n  }, [onScroll]);\n  return /*#__PURE__*/_jsxDEV(ScrollBar, { ...rest,\n    ref: scrollEl,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Scrollbar, \"vsAbPFT8ldlfW4z4BZOBcW2Sxbs=\");\n\n_c = Scrollbar;\nexport default Scrollbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scrollbar\");","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/components/Scrollbar/index.js"],"names":["React","useCallback","useEffect","useRef","ScrollBar","EventHub","appConstants","Scrollbar","props","id","ref","rest","scrollEl","onScroll","event","direction","scrollId","current","window","MyScroll","contentEl","contentWrapperEl","scroll","top","scrollTop","down","offsetHeight","on","events","off","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,kCAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,GAAN;AAAW,OAAGC;AAAd,MAAuBH,KAA7B;AACA,QAAMI,QAAQ,GAAGT,MAAM,EAAvB;AAEA,QAAMU,QAAQ,GAAGZ,WAAW,CAAEa,KAAD,IAAW;AACpC,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BF,KAAhC;;AACA,QAAIL,EAAE,KAAKO,QAAX,EAAqB;AACjB,UAAIJ,QAAQ,CAACK,OAAb,EAAsB;AAClBC,QAAAA,MAAM,CAACC,QAAP,GAAkBP,QAAQ,CAACK,OAA3B;AACA,cAAM;AAAEG,UAAAA,SAAF;AAAaC,UAAAA;AAAb,YAAkCT,QAAQ,CAACK,OAAjD;AACA;;AAEA,YAAIF,SAAS,KAAKT,YAAY,CAACgB,MAAb,CAAoBP,SAApB,CAA8BQ,GAAhD,EAAqD;AACjDF,UAAAA,gBAAgB,CAACG,SAAjB,GAA6B,CAA7B;AACH,SAFD,MAEO,IAAIT,SAAS,KAAKT,YAAY,CAACgB,MAAb,CAAoBP,SAApB,CAA8BU,IAAhD,EAAsD;AACzD,cAAIJ,gBAAgB,CAACK,YAAjB,GAAgCN,SAAS,CAACM,YAA9C,EAA4D;AACxDL,YAAAA,gBAAgB,CAACG,SAAjB,GAA6BJ,SAAS,CAACM,YAAV,GAAyBL,gBAAgB,CAACK,YAAvE;AACH;AACJ;AACJ;AACJ;AAEJ,GAlB2B,EAkBzB,CAAEjB,EAAF,CAlByB,CAA5B;AAmBAP,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,QAAQ,CAACsB,EAAT,CAAYrB,YAAY,CAACsB,MAAb,CAAoBN,MAAhC,EAAwCT,QAAxC;AACA,WAAO,MAAM;AACTR,MAAAA,QAAQ,CAACwB,GAAT,CAAavB,YAAY,CAACsB,MAAb,CAAoBN,MAAjC,EAAyCT,QAAzC;AACH,KAFD;AAGH,GALQ,EAKN,CAAEA,QAAF,CALM,CAAT;AAQA,sBAAQ,QAAC,SAAD,OAAeF,IAAf;AAAqB,IAAA,GAAG,EAAEC,QAA1B;AAAoC,IAAA,KAAK,EAAE;AAAEkB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB;AAA3C;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAhCD;;GAAMxB,S;;KAAAA,S;AAkCN,eAAeA,SAAf","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\nimport ScrollBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\nimport EventHub from 'service/EventEmmitter';\nimport appConstants from 'common/appConstants';\n\nconst Scrollbar = (props) => {\n    const { id, ref, ...rest } = props\n    const scrollEl = useRef();\n    \n    const onScroll = useCallback((event) => {\n        const { direction, scrollId } = event\n        if (id === scrollId) {\n            if (scrollEl.current) {\n                window.MyScroll = scrollEl.current\n                const { contentEl, contentWrapperEl } = scrollEl.current\n                debugger\n    \n                if (direction === appConstants.scroll.direction.top) {\n                    contentWrapperEl.scrollTop = 0\n                } else if (direction === appConstants.scroll.direction.down) {\n                    if (contentWrapperEl.offsetHeight < contentEl.offsetHeight) {\n                        contentWrapperEl.scrollTop = contentEl.offsetHeight - contentWrapperEl.offsetHeight\n                    }\n                }\n            }\n        }\n    \n    }, [ id ])\n    useEffect(() => {\n        EventHub.on(appConstants.events.scroll, onScroll)\n        return () => {\n            EventHub.off(appConstants.events.scroll, onScroll)\n        }\n    }, [ onScroll ])\n    \n    \n    return (<ScrollBar {...rest} ref={scrollEl} style={{ width: '100%', height: '100%' }}/>)\n}\n\nexport default Scrollbar\n"]},"metadata":{},"sourceType":"module"}