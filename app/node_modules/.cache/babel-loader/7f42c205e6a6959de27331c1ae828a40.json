{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleRoutinePromiseAction),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(routinePromiseWatcherSaga);\n\nimport { takeEvery, take, race, put, call, all } from 'redux-saga/effects';\nimport { ROUTINE_PROMISE_ACTION } from './constants';\n\nvar getPayload = function getPayload(data) {\n  return data && data.payload || data;\n};\n\nexport function handleRoutinePromiseAction(action) {\n  var payload, _action$meta, routine, noSuccessPayload, _action$meta$defer, resolve, reject, _yield$all, _yield$all$, success, failure;\n\n  return _regeneratorRuntime.wrap(function handleRoutinePromiseAction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = action.payload, _action$meta = action.meta, routine = _action$meta.routine, noSuccessPayload = _action$meta.noSuccessPayload, _action$meta$defer = _action$meta.defer, resolve = _action$meta$defer.resolve, reject = _action$meta$defer.reject;\n          _context.next = 3;\n          return all([race({\n            success: take(routine.SUCCESS),\n            failure: take(routine.FAILURE)\n          }), put(routine.trigger(payload))]);\n\n        case 3:\n          _yield$all = _context.sent;\n          _yield$all$ = _yield$all[0];\n          success = _yield$all$.success;\n          failure = _yield$all$.failure;\n\n          if (!success) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return noSuccessPayload ? call(resolve) : call(resolve, getPayload(success));\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return call(reject, getPayload(failure));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport default function routinePromiseWatcherSaga() {\n  return _regeneratorRuntime.wrap(function routinePromiseWatcherSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ROUTINE_PROMISE_ACTION, handleRoutinePromiseAction);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/node_modules/redux-saga-routines/es/routinePromiseWatcherSaga.js"],"names":["_regeneratorRuntime","_marked","mark","handleRoutinePromiseAction","_marked2","routinePromiseWatcherSaga","takeEvery","take","race","put","call","all","ROUTINE_PROMISE_ACTION","getPayload","data","payload","action","_action$meta","routine","noSuccessPayload","_action$meta$defer","resolve","reject","_yield$all","_yield$all$","success","failure","wrap","handleRoutinePromiseAction$","_context","prev","next","meta","defer","SUCCESS","FAILURE","trigger","sent","stop","routinePromiseWatcherSaga$","_context2"],"mappings":"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","sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleRoutinePromiseAction),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(routinePromiseWatcherSaga);\n\nimport { takeEvery, take, race, put, call, all } from 'redux-saga/effects';\nimport { ROUTINE_PROMISE_ACTION } from './constants';\n\nvar getPayload = function getPayload(data) {\n  return data && data.payload || data;\n};\n\nexport function handleRoutinePromiseAction(action) {\n  var payload, _action$meta, routine, noSuccessPayload, _action$meta$defer, resolve, reject, _yield$all, _yield$all$, success, failure;\n\n  return _regeneratorRuntime.wrap(function handleRoutinePromiseAction$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = action.payload, _action$meta = action.meta, routine = _action$meta.routine, noSuccessPayload = _action$meta.noSuccessPayload, _action$meta$defer = _action$meta.defer, resolve = _action$meta$defer.resolve, reject = _action$meta$defer.reject;\n          _context.next = 3;\n          return all([race({\n            success: take(routine.SUCCESS),\n            failure: take(routine.FAILURE)\n          }), put(routine.trigger(payload))]);\n\n        case 3:\n          _yield$all = _context.sent;\n          _yield$all$ = _yield$all[0];\n          success = _yield$all$.success;\n          failure = _yield$all$.failure;\n\n          if (!success) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return noSuccessPayload ? call(resolve) : call(resolve, getPayload(success));\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return call(reject, getPayload(failure));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport default function routinePromiseWatcherSaga() {\n  return _regeneratorRuntime.wrap(function routinePromiseWatcherSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ROUTINE_PROMISE_ACTION, handleRoutinePromiseAction);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}"]},"metadata":{},"sourceType":"module"}