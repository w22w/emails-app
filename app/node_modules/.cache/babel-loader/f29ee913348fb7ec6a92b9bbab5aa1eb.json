{"ast":null,"code":"var _jsxFileName = \"/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/components/Modal/UserMessages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getMessagesAllByUserId } from 'store/messages/selectors';\nimport { UserMessage } from '../Message';\nimport { getUsersAllByIdUserName } from 'store/users/selectors';\nimport css from './Modal.module.scss';\nimport { Scrollbar } from '../index';\nimport { markAllRead } from 'store/users/actions';\nimport { markMessagesReadForUser } from 'store/messages/actions';\nimport uuid from 'react-uuid';\nimport EventHub from 'service/EventEmmitter';\nimport appConstants from 'common/appConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserMessages = props => {\n  _s();\n\n  const {\n    id,\n    onClose\n  } = props;\n  const dispatch = useDispatch();\n  const userName = useSelector(state => getUsersAllByIdUserName(state, id), shallowEqual);\n  const messages = useSelector(state => getMessagesAllByUserId(state, id), shallowEqual);\n  const [scrollId] = useState(uuid());\n  useEffect(() => {\n    if (id) {\n      dispatch(markAllRead({\n        userId: id\n      }));\n    }\n\n    return () => {\n      if (id) {\n        dispatch(markMessagesReadForUser({\n          userId: id\n        }));\n      }\n    };\n  }, [id, dispatch]);\n  useEffect(() => {\n    setTimeout(() => {\n      EventHub.emit(appConstants.events.scroll, {\n        scrollId,\n        direction: appConstants.scroll.direction.down\n      });\n    }, 0);\n  }, [scrollId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.Title,\n      children: [\"Messages for \", userName, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.CloseButton,\n        onClick: onClose,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.Content,\n      children: /*#__PURE__*/_jsxDEV(Scrollbar, {\n        id: scrollId,\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(UserMessage, {\n          id: message.messageId\n        }, message.messageId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 50\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserMessages, \"b8qyL6MlmzCo7KUBRZcnahA4mp8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UserMessages;\nexport default UserMessages;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserMessages\");","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/components/Modal/UserMessages.js"],"names":["React","useEffect","useState","shallowEqual","useDispatch","useSelector","getMessagesAllByUserId","UserMessage","getUsersAllByIdUserName","css","Scrollbar","markAllRead","markMessagesReadForUser","uuid","EventHub","appConstants","UserMessages","props","id","onClose","dispatch","userName","state","messages","scrollId","userId","setTimeout","emit","events","scroll","direction","down","Title","CloseButton","Content","map","message","messageId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,WAApC,QAAuD,aAAvD;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,uBAAT,QAAwC,uBAAxC;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,uBAAT,QAAwC,wBAAxC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAkBF,KAAxB;AACA,QAAMG,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAMiB,QAAQ,GAAGhB,WAAW,CAACiB,KAAK,IAAId,uBAAuB,CAACc,KAAD,EAAQJ,EAAR,CAAjC,EAA8Cf,YAA9C,CAA5B;AACA,QAAMoB,QAAQ,GAAGlB,WAAW,CAACiB,KAAK,IAAIhB,sBAAsB,CAACgB,KAAD,EAAQJ,EAAR,CAAhC,EAA6Cf,YAA7C,CAA5B;AACA,QAAM,CAAEqB,QAAF,IAAetB,QAAQ,CAACW,IAAI,EAAL,CAA7B;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,EAAJ,EAAQ;AACJE,MAAAA,QAAQ,CAACT,WAAW,CAAC;AAAEc,QAAAA,MAAM,EAAEP;AAAV,OAAD,CAAZ,CAAR;AACH;;AACD,WAAO,MAAM;AACT,UAAIA,EAAJ,EAAQ;AACJE,QAAAA,QAAQ,CAACR,uBAAuB,CAAC;AAAEa,UAAAA,MAAM,EAAEP;AAAV,SAAD,CAAxB,CAAR;AACH;AACJ,KAJD;AAKH,GATQ,EASN,CAAEA,EAAF,EAAME,QAAN,CATM,CAAT;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,UAAU,CAAC,MAAM;AACbZ,MAAAA,QAAQ,CAACa,IAAT,CAAcZ,YAAY,CAACa,MAAb,CAAoBC,MAAlC,EAA0C;AAAEL,QAAAA,QAAF;AAAYM,QAAAA,SAAS,EAAEf,YAAY,CAACc,MAAb,CAAoBC,SAApB,CAA8BC;AAArD,OAA1C;AACH,KAFS,EAEP,CAFO,CAAV;AAIH,GALQ,EAKN,CAAEP,QAAF,CALM,CAAT;AAQA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEf,GAAG,CAACuB,KAApB;AAAA,kCACkBX,QADlB,eAEI;AAAK,QAAA,SAAS,EAAEZ,GAAG,CAACwB,WAApB;AAAiC,QAAA,OAAO,EAAEd,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAEV,GAAG,CAACyB,OAApB;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,EAAE,EAAEV,QAAf;AAAA,kBAEQD,QAAQ,CAACY,GAAT,CAAcC,OAAO,iBAAI,QAAC,WAAD;AAAa,UAAA,EAAE,EAAEA,OAAO,CAACC;AAAzB,WAAyCD,OAAO,CAACC,SAAjD;AAAA;AAAA;AAAA;AAAA,gBAAzB;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH,CAzCD;;GAAMrB,Y;UAEeZ,W,EACAC,W,EACAA,W;;;KAJfW,Y;AA2CN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { getMessagesAllByUserId } from 'store/messages/selectors';\nimport { UserMessage } from '../Message';\nimport { getUsersAllByIdUserName } from 'store/users/selectors';\nimport css from './Modal.module.scss'\nimport { Scrollbar } from '../index';\nimport { markAllRead } from 'store/users/actions';\nimport { markMessagesReadForUser } from 'store/messages/actions';\nimport uuid from 'react-uuid'\nimport EventHub from 'service/EventEmmitter'\nimport appConstants from 'common/appConstants';\n\nconst UserMessages = (props) => {\n    const { id, onClose } = props\n    const dispatch = useDispatch()\n    const userName = useSelector(state => getUsersAllByIdUserName(state, id), shallowEqual)\n    const messages = useSelector(state => getMessagesAllByUserId(state, id), shallowEqual)\n    const [ scrollId ] = useState(uuid())\n    \n    useEffect(() => {\n        if (id) {\n            dispatch(markAllRead({ userId: id }))\n        }\n        return () => {\n            if (id) {\n                dispatch(markMessagesReadForUser({ userId: id }))\n            }\n        }\n    }, [ id, dispatch ])\n    \n    useEffect(() => {\n        setTimeout(() => {\n            EventHub.emit(appConstants.events.scroll, { scrollId, direction: appConstants.scroll.direction.down })\n        }, 0)\n    \n    }, [ scrollId ])\n    \n    \n    return (\n        <div>\n            <div className={css.Title}>\n                Messages for {userName}\n                <div className={css.CloseButton} onClick={onClose}>X</div>\n            </div>\n            <div className={css.Content}>\n                <Scrollbar id={scrollId}>\n                    {\n                        messages.map((message => <UserMessage id={message.messageId} key={message.messageId}/>))\n                    }\n                </Scrollbar>\n            </div>\n        </div>\n    )\n}\n\nexport default UserMessages\n"]},"metadata":{},"sourceType":"module"}