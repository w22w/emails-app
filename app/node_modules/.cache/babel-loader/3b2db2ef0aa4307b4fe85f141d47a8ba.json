{"ast":null,"code":"import _objectSpread from\"/EX_WIN/PROJECTS/MyGithub/emails-app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/EX_WIN/PROJECTS/MyGithub/emails-app/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _initialState;import appConstants from\"common/appConstants\";import produce from\"immer\";import*as ACTIONS from\"./actions\";import _ from'lodash/core';export var initialState=(_initialState={},_defineProperty(_initialState,appConstants.destinations.inbox,{all:{},ordered:[]}),_defineProperty(_initialState,appConstants.destinations.outbox,{all:{},ordered:[]}),_initialState);var messagesReducer=function messagesReducer(){var initState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_objectSpread({},initialState);var action=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return produce(initState,function(state){switch(action.type){case ACTIONS.addMessage.REQUEST:{return;}case ACTIONS.addMessage.SUCCESS:{var _action$payload=action.payload,messageId=_action$payload.messageId,destination=_action$payload.destination;if(messageId){state[destination].all[messageId]=_objectSpread(_objectSpread({},action.payload),{},{read:false});state[destination].ordered.push(messageId);}return;}case ACTIONS.markMessagesReadForUser.SUCCESS:{var userId=action.payload.userId;if(userId){_.forEach(state[appConstants.destinations.inbox].all,function(message){if(message.userId===userId){state[appConstants.destinations.inbox].all[message.messageId].read=true;}});_.forEach(state[appConstants.destinations.outbox].all,function(message){if(message.userId===userId){state[appConstants.destinations.outbox].all[message.messageId].read=true;}});}return;}case ACTIONS.addMessage.FAILURE:{return;}case ACTIONS.clearMessages.SUCCESS:{return _objectSpread({},initialState);}default:{return;}}});};export default messagesReducer;","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/messages/reducer.js"],"names":["appConstants","produce","ACTIONS","_","initialState","destinations","inbox","all","ordered","outbox","messagesReducer","initState","action","state","type","addMessage","REQUEST","SUCCESS","payload","messageId","destination","read","push","markMessagesReadForUser","userId","forEach","message","FAILURE","clearMessages"],"mappings":"iVAAA,MAAOA,CAAAA,YAAP,KAAyB,qBAAzB,CACA,MAAOC,CAAAA,OAAP,KAAoB,OAApB,CACA,MAAO,GAAKC,CAAAA,OAAZ,KAAyB,WAAzB,CACA,MAAOC,CAAAA,CAAP,KAAc,aAAd,CAEA,MAAO,IAAMC,CAAAA,YAAY,iDACnBJ,YAAY,CAACK,YAAb,CAA0BC,KADP,CACgB,CACjCC,GAAG,CAAE,EAD4B,CAEjCC,OAAO,CAAE,EAFwB,CADhB,gCAKnBR,YAAY,CAACK,YAAb,CAA0BI,MALP,CAKiB,CAClCF,GAAG,CAAE,EAD6B,CAElCC,OAAO,CAAE,EAFyB,CALjB,gBAAlB,CAWP,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAACC,CAAAA,SAAD,4EAAkBP,YAAlB,KAAkCQ,CAAAA,MAAlC,2DAA2C,EAA3C,OACpBX,CAAAA,OAAO,CAACU,SAAD,CAAY,SAACE,KAAD,CAAW,CAC1B,OAAQD,MAAM,CAACE,IAAf,EACI,IAAKZ,CAAAA,OAAO,CAACa,UAAR,CAAmBC,OAAxB,CAAiC,CAC7B,OACH,CACD,IAAKd,CAAAA,OAAO,CAACa,UAAR,CAAmBE,OAAxB,CAAiC,qBACML,MAAM,CAACM,OADb,CACrBC,SADqB,iBACrBA,SADqB,CACVC,WADU,iBACVA,WADU,CAE7B,GAAID,SAAJ,CAAe,CACXN,KAAK,CAAEO,WAAF,CAAL,CAAqBb,GAArB,CAA0BY,SAA1B,iCAA6CP,MAAM,CAACM,OAApD,MAA6DG,IAAI,CAAE,KAAnE,GACAR,KAAK,CAAEO,WAAF,CAAL,CAAqBZ,OAArB,CAA6Bc,IAA7B,CAAkCH,SAAlC,EACH,CACD,OACH,CAED,IAAKjB,CAAAA,OAAO,CAACqB,uBAAR,CAAgCN,OAArC,CAA8C,IAClCO,CAAAA,MADkC,CACvBZ,MAAM,CAACM,OADgB,CAClCM,MADkC,CAE1C,GAAIA,MAAJ,CAAY,CACRrB,CAAC,CAACsB,OAAF,CAAUZ,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAAyCC,GAAnD,CAAwD,SAACmB,OAAD,CAAa,CACjE,GAAIA,OAAO,CAACF,MAAR,GAAmBA,MAAvB,CAA+B,CAC3BX,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAAyCC,GAAzC,CAA8CmB,OAAO,CAACP,SAAtD,EAAkEE,IAAlE,CAAyE,IAAzE,CACH,CACJ,CAJD,EAKAlB,CAAC,CAACsB,OAAF,CAAUZ,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BI,MAA5B,CAAL,CAA0CF,GAApD,CAAyD,SAACmB,OAAD,CAAa,CAClE,GAAIA,OAAO,CAACF,MAAR,GAAmBA,MAAvB,CAA+B,CAC3BX,KAAK,CAAEb,YAAY,CAACK,YAAb,CAA0BI,MAA5B,CAAL,CAA0CF,GAA1C,CAA+CmB,OAAO,CAACP,SAAvD,EAAmEE,IAAnE,CAA0E,IAA1E,CACH,CACJ,CAJD,EAKH,CACD,OACH,CAED,IAAKnB,CAAAA,OAAO,CAACa,UAAR,CAAmBY,OAAxB,CAAiC,CAC7B,OACH,CAED,IAAKzB,CAAAA,OAAO,CAAC0B,aAAR,CAAsBX,OAA3B,CAAoC,CAChC,wBACOb,YADP,EAGH,CAED,QAAS,CACL,OACH,CA1CL,CA4CH,CA7CM,CADa,EAAxB,CAgDA,cAAeM,CAAAA,eAAf","sourcesContent":["import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\nimport _ from 'lodash/core'\n\nexport const initialState = {\n    [ appConstants.destinations.inbox ]: {\n        all: {},\n        ordered: []\n    },\n    [ appConstants.destinations.outbox ]: {\n        all: {},\n        ordered: []\n    },\n};\n\nconst messagesReducer = (initState = { ...initialState }, action = {}) =>\n    produce(initState, (state) => {\n        switch (action.type) {\n            case ACTIONS.addMessage.REQUEST: {\n                return;\n            }\n            case ACTIONS.addMessage.SUCCESS: {\n                const { messageId, destination } = action.payload\n                if (messageId) {\n                    state[ destination ].all[ messageId ] = { ...action.payload, read: false }\n                    state[ destination ].ordered.push(messageId)\n                }\n                return;\n            }\n            \n            case ACTIONS.markMessagesReadForUser.SUCCESS: {\n                const { userId } = action.payload\n                if (userId) {\n                    _.forEach(state[ appConstants.destinations.inbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.inbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                    _.forEach(state[ appConstants.destinations.outbox ].all, (message) => {\n                        if (message.userId === userId) {\n                            state[ appConstants.destinations.outbox ].all[ message.messageId ].read = true\n                        }\n                    })\n                }\n                return;\n            }\n            \n            case ACTIONS.addMessage.FAILURE: {\n                return;\n            }\n            \n            case ACTIONS.clearMessages.SUCCESS: {\n                return {\n                    ...initialState\n                }\n            }\n            \n            default: {\n                return;\n            }\n        }\n    });\n\nexport default messagesReducer\n"]},"metadata":{},"sourceType":"module"}