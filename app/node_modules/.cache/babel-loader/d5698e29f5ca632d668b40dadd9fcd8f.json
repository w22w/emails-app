{"ast":null,"code":"import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\nexport const initialState = {\n  users: {},\n  [appConstants.destinations.inbox]: {},\n  [appConstants.destinations.outbox]: {}\n};\n\nconst usersReducer = (initState = { ...initialState\n}, action = {}) => produce(initState, state => {\n  switch (action.type) {\n    case ACTIONS.updateUser.REQUEST:\n      {\n        return;\n      }\n\n    case ACTIONS.updateUser.SUCCESS:\n      {\n        const {\n          user,\n          destination,\n          createdAt,\n          messageId\n        } = action.payload;\n\n        if (user && user.userId) {\n          state.users[user.userId] = { ...user\n          };\n        }\n\n        if (state[destination]) {\n          if (state[destination][user.userId]) {\n            state[destination][user.userId].count += 1;\n            state[destination][user.userId].lastUpdate = createdAt;\n            state[destination][user.userId].lastMessageId = messageId;\n          } else {\n            state[destination][user.userId] = {\n              count: 1,\n              lastUpdate: createdAt,\n              lastMessageId: messageId\n            };\n          }\n        }\n\n        return;\n      }\n\n    case ACTIONS.updateUser.FAILURE:\n      {\n        return;\n      }\n\n    case ACTIONS.markAllRead.SUCCESS:\n      {\n        const {\n          userId\n        } = action.payload;\n\n        if (state[appConstants.destinations.inbox][userId]) {\n          state[appConstants.destinations.inbox][userId].count = 0;\n        }\n\n        if (state[appConstants.destinations.outbox][userId]) {\n          state[appConstants.destinations.outbox][userId].count = 0;\n        }\n\n        return;\n      }\n\n    case ACTIONS.clearUsers.SUCCESS:\n      {\n        return { ...initState\n        };\n      }\n\n    default:\n      {\n        return;\n      }\n  }\n});\n\nexport default usersReducer;","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/users/reducer.js"],"names":["appConstants","produce","ACTIONS","initialState","users","destinations","inbox","outbox","usersReducer","initState","action","state","type","updateUser","REQUEST","SUCCESS","user","destination","createdAt","messageId","payload","userId","count","lastUpdate","lastMessageId","FAILURE","markAllRead","clearUsers"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,EADmB;AAE1B,GAAEJ,YAAY,CAACK,YAAb,CAA0BC,KAA5B,GAAqC,EAFX;AAG1B,GAAEN,YAAY,CAACK,YAAb,CAA0BE,MAA5B,GAAsC;AAHZ,CAArB;;AAMP,MAAMC,YAAY,GAAG,CAACC,SAAS,GAAG,EAAE,GAAGN;AAAL,CAAb,EAAkCO,MAAM,GAAG,EAA3C,KACjBT,OAAO,CAACQ,SAAD,EAAaE,KAAD,IAAW;AAC5B,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKV,OAAO,CAACW,UAAR,CAAmBC,OAAxB;AAAiC;AAC/B;AACD;;AACD,SAAKZ,OAAO,CAACW,UAAR,CAAmBE,OAAxB;AAAiC;AAC/B,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,WAAR;AAAqBC,UAAAA,SAArB;AAAgCC,UAAAA;AAAhC,YAA8CT,MAAM,CAACU,OAA3D;;AACA,YAAIJ,IAAI,IAAIA,IAAI,CAACK,MAAjB,EAAyB;AACvBV,UAAAA,KAAK,CAACP,KAAN,CAAaY,IAAI,CAACK,MAAlB,IAA6B,EAAE,GAAGL;AAAL,WAA7B;AACD;;AACD,YAAIL,KAAK,CAAEM,WAAF,CAAT,EAA0B;AACxB,cAAIN,KAAK,CAAEM,WAAF,CAAL,CAAsBD,IAAI,CAACK,MAA3B,CAAJ,EAAyC;AACvCV,YAAAA,KAAK,CAAEM,WAAF,CAAL,CAAsBD,IAAI,CAACK,MAA3B,EAAoCC,KAApC,IAA6C,CAA7C;AACAX,YAAAA,KAAK,CAAEM,WAAF,CAAL,CAAsBD,IAAI,CAACK,MAA3B,EAAoCE,UAApC,GAAiDL,SAAjD;AACAP,YAAAA,KAAK,CAAEM,WAAF,CAAL,CAAsBD,IAAI,CAACK,MAA3B,EAAoCG,aAApC,GAAoDL,SAApD;AACD,WAJD,MAIO;AACLR,YAAAA,KAAK,CAAEM,WAAF,CAAL,CAAsBD,IAAI,CAACK,MAA3B,IAAsC;AACpCC,cAAAA,KAAK,EAAE,CAD6B;AAEpCC,cAAAA,UAAU,EAAEL,SAFwB;AAGpCM,cAAAA,aAAa,EAAEL;AAHqB,aAAtC;AAKD;AACF;;AACD;AACD;;AACD,SAAKjB,OAAO,CAACW,UAAR,CAAmBY,OAAxB;AAAiC;AAC/B;AACD;;AAED,SAAKvB,OAAO,CAACwB,WAAR,CAAoBX,OAAzB;AAAkC;AAChC,cAAM;AAAEM,UAAAA;AAAF,YAAaX,MAAM,CAACU,OAA1B;;AACA,YAAIT,KAAK,CAAEX,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAA0Ce,MAA1C,CAAJ,EAAwD;AACtDV,UAAAA,KAAK,CAAEX,YAAY,CAACK,YAAb,CAA0BC,KAA5B,CAAL,CAA0Ce,MAA1C,EAAmDC,KAAnD,GAA2D,CAA3D;AACD;;AACD,YAAIX,KAAK,CAAEX,YAAY,CAACK,YAAb,CAA0BE,MAA5B,CAAL,CAA2Cc,MAA3C,CAAJ,EAAyD;AACvDV,UAAAA,KAAK,CAAEX,YAAY,CAACK,YAAb,CAA0BE,MAA5B,CAAL,CAA2Cc,MAA3C,EAAoDC,KAApD,GAA4D,CAA5D;AACD;;AACD;AACD;;AACD,SAAKpB,OAAO,CAACyB,UAAR,CAAmBZ,OAAxB;AAAiC;AAC/B,eAAO,EACL,GAAGN;AADE,SAAP;AAGD;;AAED;AAAS;AACP;AACD;AA9CH;AAgDD,CAjDM,CADX;;AAoDA,eAAeD,YAAf","sourcesContent":["import appConstants from \"common/appConstants\";\nimport produce from \"immer\";\nimport * as ACTIONS from \"./actions\";\n\nexport const initialState = {\n  users: {},\n  [ appConstants.destinations.inbox ]: {},\n  [ appConstants.destinations.outbox ]: {},\n};\n\nconst usersReducer = (initState = { ...initialState }, action = {}) =>\n    produce(initState, (state) => {\n      switch (action.type) {\n        case ACTIONS.updateUser.REQUEST: {\n          return;\n        }\n        case ACTIONS.updateUser.SUCCESS: {\n          const { user, destination, createdAt, messageId } = action.payload;\n          if (user && user.userId) {\n            state.users[ user.userId ] = { ...user };\n          }\n          if (state[ destination ]) {\n            if (state[ destination ][ user.userId ]) {\n              state[ destination ][ user.userId ].count += 1;\n              state[ destination ][ user.userId ].lastUpdate = createdAt;\n              state[ destination ][ user.userId ].lastMessageId = messageId;\n            } else {\n              state[ destination ][ user.userId ] = {\n                count: 1,\n                lastUpdate: createdAt,\n                lastMessageId: messageId\n              };\n            }\n          }\n          return;\n        }\n        case ACTIONS.updateUser.FAILURE: {\n          return;\n        }\n        \n        case ACTIONS.markAllRead.SUCCESS: {\n          const { userId } = action.payload\n          if (state[ appConstants.destinations.inbox ][ userId ]) {\n            state[ appConstants.destinations.inbox ][ userId ].count = 0\n          }\n          if (state[ appConstants.destinations.outbox ][ userId ]) {\n            state[ appConstants.destinations.outbox ][ userId ].count = 0\n          }\n          return;\n        }\n        case ACTIONS.clearUsers.SUCCESS: {\n          return {\n            ...initState\n          }\n        }\n        \n        default: {\n          return;\n        }\n      }\n    });\n\nexport default usersReducer\n"]},"metadata":{},"sourceType":"module"}