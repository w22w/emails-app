{"ast":null,"code":"import { all, delay, put, takeEvery } from 'redux-saga/effects';\nimport * as ACTIONS from './actions';\nimport { updateUser } from 'store/users/actions';\nimport appConstants from 'common/appConstants';\nimport history from 'common/history';\nexport function* addMessageHandler(action) {\n  yield put(ACTIONS.addMessage.request(action.payload));\n\n  try {\n    const {\n      userId,\n      username,\n      destination,\n      createdAt,\n      messageId\n    } = action.payload;\n    yield put(updateUser({\n      userId,\n      username,\n      messageId,\n      destination,\n      createdAt\n    }));\n    yield put(ACTIONS.addMessage.success(action.payload));\n    yield delay(0.5);\n\n    if (destination === appConstants.destinations.inbox) {\n      history.push(appConstants.router.inbox);\n    } else {\n      history.push(appConstants.router.outbox);\n    }\n  } catch (e) {\n    yield put(ACTIONS.addMessage.failure(e));\n  }\n}\nexport function* clearMessagesHandler(action) {\n  yield put(ACTIONS.clearMessages.success(action.payload));\n}\nexport function* markMessagesReadForUserHandler(action) {\n  yield put(ACTIONS.markMessagesReadForUser.success(action.payload));\n}\nexport function* watchMessagesSaga() {\n  yield all([takeEvery(ACTIONS.addMessage.TRIGGER, addMessageHandler), takeEvery(ACTIONS.clearMessages.TRIGGER, clearMessagesHandler), takeEvery(ACTIONS.markMessagesReadForUser.TRIGGER, markMessagesReadForUserHandler)]);\n}","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/messages/sagas.js"],"names":["all","delay","put","takeEvery","ACTIONS","updateUser","appConstants","history","addMessageHandler","action","addMessage","request","payload","userId","username","destination","createdAt","messageId","success","destinations","inbox","push","router","outbox","e","failure","clearMessagesHandler","clearMessages","markMessagesReadForUserHandler","markMessagesReadForUser","watchMessagesSaga","TRIGGER"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,GAArB,EAA0BC,SAA1B,QAA2C,oBAA3C;AAEA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,UAAUC,iBAAV,CAA4BC,MAA5B,EAAoC;AACvC,QAAMP,GAAG,CAACE,OAAO,CAACM,UAAR,CAAmBC,OAAnB,CAA2BF,MAAM,CAACG,OAAlC,CAAD,CAAT;;AACA,MAAI;AACA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,WAApB;AAAiCC,MAAAA,SAAjC;AAA4CC,MAAAA;AAA5C,QAA0DR,MAAM,CAACG,OAAvE;AACA,UAAMV,GAAG,CAACG,UAAU,CAAC;AACjBQ,MAAAA,MADiB;AAEjBC,MAAAA,QAFiB;AAGjBG,MAAAA,SAHiB;AAIjBF,MAAAA,WAJiB;AAKjBC,MAAAA;AALiB,KAAD,CAAX,CAAT;AAQA,UAAMd,GAAG,CAACE,OAAO,CAACM,UAAR,CAAmBQ,OAAnB,CAA2BT,MAAM,CAACG,OAAlC,CAAD,CAAT;AAEA,UAAMX,KAAK,CAAC,GAAD,CAAX;;AACA,QAAIc,WAAW,KAAKT,YAAY,CAACa,YAAb,CAA0BC,KAA9C,EAAqD;AACjDb,MAAAA,OAAO,CAACc,IAAR,CAAaf,YAAY,CAACgB,MAAb,CAAoBF,KAAjC;AACH,KAFD,MAEO;AACHb,MAAAA,OAAO,CAACc,IAAR,CAAaf,YAAY,CAACgB,MAAb,CAAoBC,MAAjC;AACH;AACJ,GAlBD,CAkBE,OAAOC,CAAP,EAAU;AACR,UAAMtB,GAAG,CAACE,OAAO,CAACM,UAAR,CAAmBe,OAAnB,CAA2BD,CAA3B,CAAD,CAAT;AACH;AACJ;AAED,OAAO,UAAUE,oBAAV,CAA+BjB,MAA/B,EAAuC;AAC1C,QAAMP,GAAG,CAACE,OAAO,CAACuB,aAAR,CAAsBT,OAAtB,CAA8BT,MAAM,CAACG,OAArC,CAAD,CAAT;AACH;AAED,OAAO,UAAUgB,8BAAV,CAAyCnB,MAAzC,EAAiD;AACpD,QAAMP,GAAG,CAACE,OAAO,CAACyB,uBAAR,CAAgCX,OAAhC,CAAwCT,MAAM,CAACG,OAA/C,CAAD,CAAT;AACH;AAED,OAAO,UAAUkB,iBAAV,GAA8B;AACjC,QAAM9B,GAAG,CAAC,CACNG,SAAS,CAACC,OAAO,CAACM,UAAR,CAAmBqB,OAApB,EAA6BvB,iBAA7B,CADH,EAENL,SAAS,CAACC,OAAO,CAACuB,aAAR,CAAsBI,OAAvB,EAAgCL,oBAAhC,CAFH,EAGNvB,SAAS,CAACC,OAAO,CAACyB,uBAAR,CAAgCE,OAAjC,EAA0CH,8BAA1C,CAHH,CAAD,CAAT;AAMH","sourcesContent":["import { all, delay, put, takeEvery } from 'redux-saga/effects'\n\nimport * as ACTIONS from './actions'\nimport { updateUser } from 'store/users/actions'\nimport appConstants from 'common/appConstants'\nimport history from 'common/history'\n\nexport function* addMessageHandler(action) {\n    yield put(ACTIONS.addMessage.request(action.payload))\n    try {\n        const { userId, username, destination, createdAt, messageId } = action.payload\n        yield put(updateUser({\n            userId,\n            username,\n            messageId,\n            destination,\n            createdAt\n        }))\n        \n        yield put(ACTIONS.addMessage.success(action.payload))\n        \n        yield delay(0.5)\n        if (destination === appConstants.destinations.inbox) {\n            history.push(appConstants.router.inbox)\n        } else {\n            history.push(appConstants.router.outbox)\n        }\n    } catch (e) {\n        yield put(ACTIONS.addMessage.failure(e))\n    }\n}\n\nexport function* clearMessagesHandler(action) {\n    yield put(ACTIONS.clearMessages.success(action.payload))\n}\n\nexport function* markMessagesReadForUserHandler(action) {\n    yield put(ACTIONS.markMessagesReadForUser.success(action.payload))\n}\n\nexport function* watchMessagesSaga() {\n    yield all([\n        takeEvery(ACTIONS.addMessage.TRIGGER, addMessageHandler),\n        takeEvery(ACTIONS.clearMessages.TRIGGER, clearMessagesHandler),\n        takeEvery(ACTIONS.markMessagesReadForUser.TRIGGER, markMessagesReadForUserHandler),\n    \n    ])\n}\n"]},"metadata":{},"sourceType":"module"}