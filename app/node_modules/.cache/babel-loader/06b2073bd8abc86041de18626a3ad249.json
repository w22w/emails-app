{"ast":null,"code":"import{applyMiddleware,compose,createStore}from'redux';import createSagaMiddleware from'redux-saga';import{sagas as rootSagas}from'store/sagas';import rootReducer from'store/reducers';import{persistReducer}from'redux-persist';import storage from'redux-persist-indexeddb-storage';var initialState={};var persistConfig={timeout:0,key:'email-app-root-key',storage:storage('appDB'),whitelist:[\"messages\",\"users\"]};var persistedReducer=persistReducer(persistConfig,rootReducer);var saga=createSagaMiddleware();var middlewares=[saga];var store=createStore(persistedReducer,initialState,compose(applyMiddleware.apply(void 0,middlewares)));saga.run(rootSagas);export default store;","map":{"version":3,"sources":["/EX_WIN/PROJECTS/MyGithub/emails-app/app/src/store/configStore/store.prod.js"],"names":["applyMiddleware","compose","createStore","createSagaMiddleware","sagas","rootSagas","rootReducer","persistReducer","storage","initialState","persistConfig","timeout","key","whitelist","persistedReducer","saga","middlewares","store","run"],"mappings":"AAAA,OAASA,eAAT,CAA0BC,OAA1B,CAAmCC,WAAnC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,OAASC,KAAK,GAAIC,CAAAA,SAAlB,KAAmC,aAAnC,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,iCAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA,GAAMC,CAAAA,aAAa,CAAG,CAClBC,OAAO,CAAE,CADS,CAElBC,GAAG,CAAE,oBAFa,CAGlBJ,OAAO,CAAEA,OAAO,CAAC,OAAD,CAHE,CAIlBK,SAAS,CAAE,CAAE,UAAF,CAAc,OAAd,CAJO,CAAtB,CAOA,GAAMC,CAAAA,gBAAgB,CAAGP,cAAc,CAACG,aAAD,CAAgBJ,WAAhB,CAAvC,CAEA,GAAMS,CAAAA,IAAI,CAAGZ,oBAAoB,EAAjC,CAEA,GAAMa,CAAAA,WAAW,CAAG,CAAED,IAAF,CAApB,CAEA,GAAME,CAAAA,KAAK,CAAGf,WAAW,CAACY,gBAAD,CAAmBL,YAAnB,CAAiCR,OAAO,CAACD,eAAe,MAAf,QAAmBgB,WAAnB,CAAD,CAAxC,CAAzB,CAEAD,IAAI,CAACG,GAAL,CAASb,SAAT,EAEA,cAAeY,CAAAA,KAAf","sourcesContent":["import { applyMiddleware, compose, createStore } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { sagas as rootSagas } from 'store/sagas'\nimport rootReducer from 'store/reducers'\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist-indexeddb-storage';\n\nconst initialState = {}\n\nconst persistConfig = {\n    timeout: 0,\n    key: 'email-app-root-key',\n    storage: storage('appDB'),\n    whitelist: [ \"messages\", \"users\" ]\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst saga = createSagaMiddleware()\n\nconst middlewares = [ saga ]\n\nconst store = createStore(persistedReducer, initialState, compose(applyMiddleware(...middlewares)))\n\nsaga.run(rootSagas)\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}